%%InitNotebooks.java

package com.twotowerstudios.virtualnotebookdesign.Initialization;

import android.content.Context;
import android.support.v4.content.ContextCompat;
import android.util.Log;

import com.google.gson.Gson;
import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;
import com.twotowerstudios.virtualnotebookdesign.Misc.SharedPrefs;
import com.twotowerstudios.virtualnotebookdesign.Objects.Notebook;
import com.twotowerstudios.virtualnotebookdesign.R;

import java.util.ArrayList;

public class InitNotebooks {

	public static boolean isDebug(Context context){
		return SharedPrefs.getBoolean(context, "debug");
	}
	private static boolean doDebugBooksExist(Context context){
		try {
			ArrayList<Notebook> list = Helpers.getNotebookList(context);
			for(Notebook n :list){
				if(n.getName().equalsIgnoreCase("debug")){
					Log.d("DebugBook", "Debug book exists");
					return true;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		Log.d("DebugBook", "Debug book doesnt exist GRACE");
		return false;
	}
	public static void populateDebugBooks(Context context, boolean isDebugTrue){
		if (isDebugTrue && !doDebugBooksExist(context)&& Helpers.getNotebookList(context).isEmpty()){

			try {
				ArrayList<Notebook> list = Helpers.getNotebookList(context);

				Notebook a = new Notebook("debug", ContextCompat.getColor(context, R.color.md_grey_500), 404, Helpers.stringDataToMillis("2016/01/01"),context);list.add(a);
				a = new Notebook("Science",ContextCompat.getColor(context, R.color.md_brown_500), 29, Helpers.stringDataToMillis("2016/11/10"),context);list.add(a);
				a = new Notebook("ECL",ContextCompat.getColor(context, R.color.md_blue_grey_500), 18, Helpers.stringDataToMillis("2016/12/26"),context);list.add(a);
				a = new Notebook("Art",ContextCompat.getColor(context, R.color.md_indigo_500), 32, Helpers.stringDataToMillis("2016/08/15"),context);list.add(a);
				a = new Notebook("Science",ContextCompat.getColor(context, R.color.md_cyan_500), 22, Helpers.stringDataToMillis("2016/01/20"),context);list.add(a);
				a = new Notebook("Science",ContextCompat.getColor(context, R.color.md_lime_500), 44, Helpers.stringDataToMillis("2016/12/07"),context);list.add(a);
				a = new Notebook("Biology",ContextCompat.getColor(context, R.color.md_teal_500), 65, Helpers.stringDataToMillis("2016/04/29"),context);list.add(a);
				a = new Notebook("Robotics",ContextCompat.getColor(context, R.color.md_brown_500), 11, Helpers.stringDataToMillis("2016/06/06"),context);list.add(a);
				a = new Notebook("English",ContextCompat.getColor(context, R.color.md_pink_500), 65, Helpers.stringDataToMillis("2016/07/18"),context);list.add(a);
				a = new Notebook("Biology",ContextCompat.getColor(context, R.color.md_purple_500), 83, Helpers.stringDataToMillis("2016/01/15"),context);list.add(a);
				a = new Notebook("Economy",ContextCompat.getColor(context, R.color.md_blue_grey_500), 47, Helpers.stringDataToMillis("2016/11/04"),context);list.add(a);
				a = new Notebook("Politics",ContextCompat.getColor(context, R.color.md_orange_500), 50, Helpers.stringDataToMillis("2016/05/22"),context);list.add(a);
				a = new Notebook("Politics",ContextCompat.getColor(context, R.color.md_amber_500), 28, Helpers.stringDataToMillis("2016/12/27"),context);list.add(a);
				a = new Notebook("Politics",ContextCompat.getColor(context, R.color.md_cyan_500), 95, Helpers.stringDataToMillis("2016/11/02"),context);list.add(a);
				a = new Notebook("Science",ContextCompat.getColor(context, R.color.md_yellow_500), 30, Helpers.stringDataToMillis("2016/07/21"),context);list.add(a);
				a = new Notebook("Robotics",ContextCompat.getColor(context, R.color.md_orange_500), 78, Helpers.stringDataToMillis("2016/10/29"),context);list.add(a);Log.d("populateDebugBooks", "successfully wrote all debug books");
				Gson gson = new Gson();

				Helpers.writeStringToFile(gson.toJson(list), context, "Notebooks.json");
			} catch (Exception e) {
				ArrayList<Notebook> list = new ArrayList<>();

				Notebook a = new Notebook("debug", ContextCompat.getColor(context, R.color.md_grey_500), 404, Helpers.stringDataToMillis("2016/01/01"),context);list.add(a);
				a = new Notebook("Science",ContextCompat.getColor(context, R.color.md_brown_500), 29, Helpers.stringDataToMillis("2016/11/10"),context);list.add(a);
				a = new Notebook("ECL",ContextCompat.getColor(context, R.color.md_yellow_500), 18, Helpers.stringDataToMillis("2016/12/26"),context);list.add(a);
				a = new Notebook("Art",ContextCompat.getColor(context, R.color.md_indigo_500), 32, Helpers.stringDataToMillis("2016/08/15"),context);list.add(a);
				a = new Notebook("Science",ContextCompat.getColor(context, R.color.md_cyan_500), 22, Helpers.stringDataToMillis("2016/01/20"),context);list.add(a);
				a = new Notebook("Science",ContextCompat.getColor(context, R.color.md_lime_500), 44, Helpers.stringDataToMillis("2016/12/07"),context);list.add(a);
				a = new Notebook("Biology",ContextCompat.getColor(context, R.color.md_teal_500), 65, Helpers.stringDataToMillis("2016/04/29"),context);list.add(a);
				a = new Notebook("Robotics",ContextCompat.getColor(context, R.color.md_brown_500), 11, Helpers.stringDataToMillis("2016/06/06"),context);list.add(a);
				a = new Notebook("English",ContextCompat.getColor(context, R.color.md_pink_500), 65, Helpers.stringDataToMillis("2016/07/18"),context);list.add(a);
				a = new Notebook("Biology",ContextCompat.getColor(context, R.color.md_purple_500), 83, Helpers.stringDataToMillis("2016/01/15"),context);list.add(a);
				a = new Notebook("Economy",ContextCompat.getColor(context, R.color.md_brown_500), 47, Helpers.stringDataToMillis("2016/11/04"),context);list.add(a);
				a = new Notebook("Politics",ContextCompat.getColor(context, R.color.md_orange_500), 50, Helpers.stringDataToMillis("2016/05/22"),context);list.add(a);
				a = new Notebook("Politics",ContextCompat.getColor(context, R.color.md_amber_500), 28, Helpers.stringDataToMillis("2016/12/27"),context);list.add(a);
				a = new Notebook("Politics",ContextCompat.getColor(context, R.color.md_cyan_500), 95, Helpers.stringDataToMillis("2016/11/02"),context);list.add(a);
				a = new Notebook("Science",ContextCompat.getColor(context, R.color.md_yellow_500), 30, Helpers.stringDataToMillis("2016/07/21"),context);list.add(a);
				a = new Notebook("Robotics",ContextCompat.getColor(context, R.color.md_orange_500), 78, Helpers.stringDataToMillis("2016/10/29"),context);list.add(a);Log.d("populateDebugBooks", "successfully wrote all debug books");

				Log.d("populateDebugBooks", "successfully wrote all debug books");
				Gson gson = new Gson();

				Helpers.writeStringToFile(gson.toJson(list), context, "Notebooks.json");
			}
		}
	}
	/*public static ArrayList<Page> populateDebugNotebookPages(ArrayList<Page> list, int reps){
		String TAG="InitNotebooks";
		if (list == null||list.size()==0) {
			Random r = new Random();
			reps = r.nextInt(reps);
			String[] names = {"Art","Biology","Chemistry",
					"DT","ECL","English",
					"History","Math","PE",
					"Physics","Science","Spanish",
					"Philosphy","Geography","Politics",
					"Economy","I.C.T.","Robotics"};
			int namesLength = names.length;
			for(int i=0;i<reps;i++){
                Page a = new Page(names[r.nextInt(namesLength)],r.nextInt(100)); list.add(a);
				Log.d(TAG, "populateDebugNotebookPages: added new page.");
			}
			Log.d(TAG, "populateDebugNotebookPages: returned list");
			return list;
		} else {
			Log.d("Helpers","PopulateDebugNotebookPages: list is not null or size != 0, returning list as-is");
			return list;
		}
	}*/
}

%%MainActivity.java
package com.twotowerstudios.virtualnotebookdesign.MainMenu;

import android.animation.ObjectAnimator;
import android.content.Intent;
import android.graphics.PorterDuff;
import android.os.Bundle;
import android.os.Environment;
import android.support.annotation.Nullable;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.TypedValue;
import android.view.View;

import com.bumptech.glide.Glide;
import com.mikepenz.materialdrawer.AccountHeader;
import com.mikepenz.materialdrawer.AccountHeaderBuilder;
import com.mikepenz.materialdrawer.Drawer;
import com.mikepenz.materialdrawer.DrawerBuilder;
import com.mikepenz.materialdrawer.model.DividerDrawerItem;
import com.mikepenz.materialdrawer.model.PrimaryDrawerItem;
import com.mikepenz.materialdrawer.model.ProfileDrawerItem;
import com.mikepenz.materialdrawer.model.SecondaryDrawerItem;
import com.mikepenz.materialdrawer.model.interfaces.IDrawerItem;
import com.mikepenz.materialdrawer.model.interfaces.IProfile;
import com.twotowerstudios.virtualnotebookdesign.Misc.FirstBookLightOffsetDecoration;
import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;
import com.twotowerstudios.virtualnotebookdesign.Misc.SharedPrefs;
import com.twotowerstudios.virtualnotebookdesign.NotebookMain.NotebookMainActivity;
import com.twotowerstudios.virtualnotebookdesign.NotebookSelection.NotebookSelection;
import com.twotowerstudios.virtualnotebookdesign.Objects.Notebook;
import com.twotowerstudios.virtualnotebookdesign.R;

import org.parceler.Parcels;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity implements BookLightAdapter.MainMenuToNotebook{

    //https://github.com/mikepenz/MaterialDrawer

    private AccountHeader accountHeader;
    RecyclerView bookLightRecyclerView;
    ArrayList<Notebook> notebookList;
    private FloatingActionButton fab1, fabShoot, fabImage, fabPage;
	//private RecyclerView.LayoutManager CommonBooksCardLayoutManager;


    boolean isMainfabOpen;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

		SharedPrefs.setBoolean(getApplicationContext(), "debug", true);
//File photo = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), newImageName + ".png");

		File nomedia = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), ".nomedia");
        if(!nomedia.exists()){
			try {
				nomedia.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if(Helpers.getStringFromFile("Notebooks.json", getApplicationContext()).equals("")){
			new File(getFilesDir(), "Notebooks.json");
		}
		/*if(InitNotebooks.isDebug(getApplicationContext())){
			Log.d("isDebugNoteSelect", "DEBUG MODE = true;");
			InitNotebooks.populateDebugBooks(getApplicationContext(), InitNotebooks.isDebug(getApplicationContext()));
		}*/
           //    ============================

		bookLightRecyclerView = (RecyclerView) findViewById(R.id.rvCommonBooks);

        final LinearLayoutManager BookLightLayoutManager = new LinearLayoutManager(this);
        BookLightLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);
        bookLightRecyclerView.setLayoutManager(BookLightLayoutManager);
        notebookList = Helpers.getNotebookList(getApplicationContext());
		RecyclerView.Adapter bookLightAdapter = new BookLightAdapter(this, notebookList, this);
        bookLightRecyclerView.setAdapter(bookLightAdapter);
        //==================
        isMainfabOpen = false;
        fab1 = (FloatingActionButton) findViewById(R.id.fabMain);
        fabShoot = (FloatingActionButton) findViewById(R.id.fabShoot);
        fabImage = (FloatingActionButton) findViewById(R.id.fabImage);
        fabPage = (FloatingActionButton) findViewById(R.id.fabPage);
        fab1.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View view) {
                if (!isMainfabOpen) {

                    fabShoot.show();
                    fabImage.show();
                    fabPage.show();
                    isMainfabOpen = true;
                    ObjectAnimator openFirstSubfab = ObjectAnimator.ofFloat(fabShoot, View.TRANSLATION_Y, 200,0); openFirstSubfab.start();
                    ObjectAnimator openSecondSubfab = ObjectAnimator.ofFloat(fabImage, View.TRANSLATION_Y, 400,0); openSecondSubfab.start();
                    ObjectAnimator openThirdSubfab = ObjectAnimator.ofFloat(fabPage, View.TRANSLATION_Y, 600, 0); openThirdSubfab.start();
                    ObjectAnimator rotateMainfab = ObjectAnimator.ofFloat(fab1, View.ROTATION, 0, 135); rotateMainfab.start();

                } else if(isMainfabOpen){
                    isMainfabOpen = false;
                    ObjectAnimator rotateMainfab = ObjectAnimator.ofFloat(fab1, View.ROTATION, 135, 270); rotateMainfab.start();
                    ObjectAnimator closeFirstSubfab = ObjectAnimator.ofFloat(fabShoot, View.TRANSLATION_Y, 0,200); closeFirstSubfab.start();
                    ObjectAnimator closeSecondSubfab = ObjectAnimator.ofFloat(fabImage, View.TRANSLATION_Y, 0,400); closeSecondSubfab.start();
                    ObjectAnimator closeThirdSubfab = ObjectAnimator.ofFloat(fabPage, View.TRANSLATION_Y, 0,600); closeThirdSubfab.start();
                    fabShoot.hide();
                    fabImage.hide();
                    fabPage.hide();
                }
            }


        });

        /**PrimaryDrawerItem item1 = new PrimaryDrawerItem().withIdentifier(1).withName("Primary one");
        SecondaryDrawerItem item2 = new SecondaryDrawerItem().withIdentifier(2).withName("Secondary One");*/
        final IProfile h1 = new ProfileDrawerItem().withName("Header 1");
        final IProfile h2 = new ProfileDrawerItem().withName("Header 2");
        final IProfile h3 = new ProfileDrawerItem().withName("Header 3");
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
		getSupportActionBar().setTitle("Virtual Notebooks");
        //PrimaryDrawerItem diNotebooks= new PrimaryDrawerItem().withName("Notebooks").withDescription("Full list of notebooks");
        accountHeader = new AccountHeaderBuilder()
                .withActivity(this)
                .withHeaderBackground(R.drawable.header)
                .addProfiles(
                        h1,h2,h3
                )
                .withOnAccountHeaderListener(new AccountHeader.OnAccountHeaderListener() {
                    @Override
                    public boolean onProfileChanged(View view, IProfile profile, boolean current) {
                        if (profile == h1){
                            Glide.with(getApplicationContext()).load(R.drawable.header).into(accountHeader.getHeaderBackgroundView());
                        } else if (profile == h2){
                            Glide.with(getApplicationContext()).load(R.drawable.header2).into(accountHeader.getHeaderBackgroundView());
                        } else if (profile == h3){
                            Glide.with(getApplicationContext()).load(R.drawable.header3).into(accountHeader.getHeaderBackgroundView());
                        }
                        return false;
                    }
                })
                .build();
        new DrawerBuilder()
                .withActivity(this)
                .withToolbar(toolbar)
                .withAccountHeader(accountHeader)
                .addDrawerItems(
						new PrimaryDrawerItem().withName("Main Menu").withIdentifier(1),
						new PrimaryDrawerItem().withName("Notebooks").withDescription("Full list of notebooks").withIdentifier(2),
						new DividerDrawerItem(),
                        new SecondaryDrawerItem().withName("I'm secondary #1").withDescription("I'm a bit more faded"),
                        new SecondaryDrawerItem().withName("I'm secondary #2").withDescription("I'm also just as faded as my brother, but I'm very long cause fuck it")

                )
                .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {
                    @Override
                    public boolean onItemClick(View view, int position, IDrawerItem drawerItem) {
                        /**if (drawerItem != null) {
                         Intent intent = null;
                         if (drawerItem.getIdentifier() == 1) {
                         intent = new Intent(DrawerActivity.this, CompactHeaderDrawerActivity.class);
                         }*/
                        if (drawerItem != null){
                            Intent intent = null;
                            if (position == 2){
                                intent = new Intent(MainActivity.this, NotebookSelection.class);
                            }
                            if (intent != null){
                                //intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
                                startActivity(intent);
								finish();
                            }
                        }
                        return false;
                    }
                })

                .build();
        Glide.with(this).load(R.drawable.header2).into(accountHeader.getHeaderBackgroundView());
        /**Color.parseColor("#00FFFF")*/
		FirstBookLightOffsetDecoration firstBookLightOffsetDecoration = new FirstBookLightOffsetDecoration((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics()));
   		bookLightRecyclerView.addItemDecoration(firstBookLightOffsetDecoration);
    }
    @Override
    protected void onPostCreate(@Nullable Bundle savedInstanceState) {
        accountHeader.getHeaderBackgroundView().setColorFilter(ContextCompat.getColor(this, R.color.colorAccent), PorterDuff.Mode.MULTIPLY);
        super.onPostCreate(savedInstanceState);
    }

    @Override
    public void openNotebook(Notebook notebook) {
        Intent intent = new Intent(this, NotebookMainActivity.class);
        intent.putExtra("notebook", Parcels.wrap(notebook));
        intent.putExtra("parent", "MainActivity");
        startActivity(intent);

    }

    @Override
    protected void onResume() {
        super.onResume();
        notebookList.clear();
        notebookList.addAll(Helpers.getNotebookList(getApplicationContext()));
        bookLightRecyclerView.getAdapter().notifyDataSetChanged();
    }
}

%%BookLightAdapter.java
package com.twotowerstudios.virtualnotebookdesign.MainMenu;

import android.content.Context;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.twotowerstudios.virtualnotebookdesign.Objects.Notebook;
import com.twotowerstudios.virtualnotebookdesign.R;

import java.util.ArrayList;

class BookLightAdapter  extends RecyclerView.Adapter<BookLightAdapter.ViewHolder>{

	private BookLightAdapter.MainMenuToNotebook Interface;

	interface MainMenuToNotebook{
		void openNotebook(Notebook notebook);
	}

	protected Context context;
	private ArrayList<Notebook> bookList = new ArrayList<>();
	static class ViewHolder extends RecyclerView.ViewHolder {
		// each data item is just a string in this case
		ImageView ivBook;
		RelativeLayout rvBookLight;
		TextView tvName;
		ViewHolder(View view) {
			super(view);
			rvBookLight = (RelativeLayout) view.findViewById(R.id.rvBookLight);
			ivBook = (ImageView) view.findViewById(R.id.ivBookLight);
			tvName = (TextView) view.findViewById(R.id.tvName);
		}
	}
	BookLightAdapter(Context context, ArrayList<Notebook> bookList, MainMenuToNotebook openNotebook){
		this.bookList = bookList;
		this.context = context;
		Interface=openNotebook;
	}
	@Override
	public BookLightAdapter.ViewHolder onCreateViewHolder (ViewGroup parent, int viewType){
		View v = LayoutInflater.from(parent.getContext())
				.inflate(R.layout.booklight, parent, false);
		return new ViewHolder(v);
	}
	@Override
	public void onBindViewHolder(ViewHolder holder, int position){
		Log.d("", "onBindViewHolder: position = "+position);
		final int position2 = position;
		holder.tvName.setText(bookList.get(position).getName());
		holder.ivBook.setColorFilter(bookList.get(position).getColor());
		holder.rvBookLight.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				if(bookList==null){
					Log.d("" ,"onClick: booklist == null");
				}
				Interface.openNotebook(bookList.get(position2));
			}
		});
	}

	@Override
	public int getItemCount() {
		return bookList.size();
	}
}
%%SharedPrefs.java

package com.twotowerstudios.virtualnotebookdesign.Misc;

import android.content.Context;
import android.preference.PreferenceManager;

/**
 * Source https://github.com/coldblade2000/Clickr/blob/master/app/src/main/java/com/twotowerstudios/clickr/SharedPrefs.java
 */

public class SharedPrefs {

	public static void setInt(Context context, String key, int input) {
		android.content.SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
		editor.putInt(key, input);
		editor.commit();
	}

	public static void setString(Context context, String key, String input) {
		android.content.SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
		editor.putString(key, input);
		editor.commit();
	}

	public static void setBoolean(Context context, String key, boolean input) {
		android.content.SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
		editor.putBoolean(key, input);
		editor.commit();
	}


	public static int getInt(Context context, String s) {
		return PreferenceManager.getDefaultSharedPreferences(context).getInt(s, -1);
	}

	public static boolean getBoolean(Context context, String s) {
		return PreferenceManager.getDefaultSharedPreferences(context).getBoolean(s, false);
	}

}
%%Helpers.java
package com.twotowerstudios.virtualnotebookdesign.Misc;

import android.content.Context;
import android.graphics.Color;
import android.support.v4.content.ContextCompat;
import android.util.Log;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.twotowerstudios.virtualnotebookdesign.Objects.Notebook;
import com.twotowerstudios.virtualnotebookdesign.Objects.Page;
import com.twotowerstudios.virtualnotebookdesign.R;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

public class Helpers {

	static Gson gson = new Gson();
	private static Random random = new Random();
	private static final String POSSIBILITY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_?";
	public static long stringDataToMillis(String date) {
		//source: http://stackoverflow.com/questions/9671085/convert-date-to-miliseconds
		long millis;
		SimpleDateFormat formatter;
		formatter = new SimpleDateFormat("yyyy/MM/dd");
		formatter.setLenient(true);
		Log.d("string2millis", "Date is: " + date);
		try {
			Date tempDate = formatter.parse(date);
			millis = tempDate.getTime();
			Log.d("string2millis", "Millis is: " + millis);
		} catch (java.text.ParseException e) {
			return 0;
		}
		return millis;
	}

	/**
	 * Format meanings
	 * 1: yyyy/MM/dd, HH:mm:ss
	 * 2: yyyy/MM/dd
	 */
	public static String millisDateToString(Long millis, int format) {
		SimpleDateFormat formatter;
		switch(format){
			case 1:
				formatter = new SimpleDateFormat("yyyy/MM/dd, HH:mm:ss");
				break;
			case 2:
				formatter = new SimpleDateFormat("yuyyy/MM/dd");
				break;
			default:
				formatter = new SimpleDateFormat("yyyy/MM/dd, HH:mm:ss");
		}

		formatter.setLenient(false);

		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return formatter.format(calendar.getTime());
	}
	public static long getCurrentTimeInMillis(){
		Calendar cal = Calendar.getInstance();

		return cal.getTimeInMillis();
	}
	public static void writeStringToFile(String input, Context context, String name) {
		FileOutputStream outputStream;
		try {
			outputStream = context.openFileOutput(name, Context.MODE_PRIVATE);
			outputStream.write(input.getBytes());
			outputStream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static String getStringFromFile(String filename, Context context) {
		BufferedReader input = null;
		try {
			input = new BufferedReader(new InputStreamReader(context.openFileInput(filename)));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		String line;
		StringBuilder buffer = new StringBuilder();
		try {
			while ((line = input.readLine()) != null) {
				buffer.append(line + "\n");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return buffer.toString();
	}

	public static ArrayList<Notebook> getNotebookList(Context context){
		ArrayList<Notebook> notebookList;
		Log.d("Helpers", "context = "+context.getPackageCodePath());
		String fileString = getStringFromFile("Notebooks.json", context);
		int reps = (fileString.length()/4000)+1;
		for (int i = 0; i < reps; i++) {
			if((i+1)*4000>fileString.length()) {
				Log.v("Helpers", "getNotebookList: \n" + fileString.substring(i * 4000, fileString.length()));
			}else{
				Log.v("Helpers", "getNotebookList: \n" + fileString.substring(i * 4000, (i + 1) * 4000));

			}
		}
		if (!fileString.equalsIgnoreCase("")) {
			Type type = new TypeToken<ArrayList<Notebook>>(){}.getType();
			notebookList = gson.fromJson(fileString,type);
		} else {
			Log.d("getNotebookList", "notebooks.json is empty, returning empty arraylist");
			notebookList = new ArrayList<>();
		}
		return notebookList;
	}

	static void writeListToFile(Context context, ArrayList<Notebook> notebookList){
		String outputString = gson.toJson(notebookList);
		writeStringToFile(outputString, context, "Notebooks.json");
	}
	public static void addToNotebookList(Notebook notebook, Context context){
		ArrayList<Notebook> list = getNotebookList(context);
		boolean bookalreadyexists=false;
		try {
			for(Notebook a: list){
				if(a.getUID16().equals(notebook.getUID16())){
					bookalreadyexists=true;
					//Toast.makeText(context, "Can't add notebook, already exists", Toast.LENGTH_SHORT).show();
					list.set(list.indexOf(a), notebook);
					break;
				}
			}
			for(int i=0; i<list.size(); i++){
				if(list.get(i).getName().equalsIgnoreCase(notebook.getName().toLowerCase())){
					bookalreadyexists=true;
					//Toast.makeText(context, "Can't add notebook, already exists", Toast.LENGTH_SHORT).show();
					list.set(i,notebook);
					break;
				}
			}
		} catch (NullPointerException e) {
			Log.d("NewNotebookFrag","Notebooklist was empty, adding notebook");
		}
		if (!bookalreadyexists) {
			list.add(notebook);
		}
		writeListToFile(context,list);
	}

	public static ArrayList<Integer> getPossibleColors(Context context){
		ArrayList<Integer> colors = new ArrayList<>();
		colors.add(ContextCompat.getColor(context,R.color.md_red_500));
		colors.add(ContextCompat.getColor(context,R.color.md_pink_500));
		colors.add(ContextCompat.getColor(context,R.color.md_purple_500));
		colors.add(ContextCompat.getColor(context,R.color.md_deep_purple_500));
		colors.add(ContextCompat.getColor(context,R.color.md_indigo_500));
		colors.add(ContextCompat.getColor(context,R.color.md_blue_500));
		colors.add(ContextCompat.getColor(context,R.color.md_light_blue_500));
		colors.add(ContextCompat.getColor(context,R.color.md_cyan_500));
		colors.add(ContextCompat.getColor(context,R.color.md_teal_500));
		colors.add(ContextCompat.getColor(context,R.color.md_green_500));
		colors.add(ContextCompat.getColor(context,R.color.md_light_green_500));
		colors.add(ContextCompat.getColor(context,R.color.md_lime_500));
		colors.add(ContextCompat.getColor(context,R.color.md_yellow_500));
		colors.add(ContextCompat.getColor(context,R.color.md_amber_500));
		colors.add(ContextCompat.getColor(context,R.color.md_orange_500));
		colors.add(ContextCompat.getColor(context,R.color.md_deep_orange_500));
		colors.add(ContextCompat.getColor(context,R.color.md_brown_500));
		colors.add(ContextCompat.getColor(context,R.color.md_grey_500));

		return colors;
	}

	private static ArrayList<Integer> getColorAccents(Context context){
		ArrayList<Integer> colors = new ArrayList<>();
		colors.add(ContextCompat.getColor(context,R.color.md_light_blue_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_green_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_green_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_orange_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_amber_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_amber_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_pink_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_orange_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_deep_orange_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_deep_orange_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_pink_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_red_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_purple_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_blue_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_light_blue_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_deep_orange_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_indigo_A200));
		colors.add(ContextCompat.getColor(context,R.color.md_pink_A200));

		return colors;
	}

	public static int getSingleColorAccent(Context context, int color){
		ArrayList<Integer> colors = getPossibleColors(context);
		String TAG = "getSingleColorAccent";
		Log.d(TAG, "colors.size()== "+colors.size());
		return getColorAccents(context).get(colors.indexOf(color));
	}

	public static String generateUniqueId(int length){
		/** BTW to ease confusion:
		 * n prefix = Notebook
		 * p prefix = Page
		 * i prefix = Image file
		 * t prefix = ChildText
		 * d prefix = ChildDriveDoc
		 * c prefix = ChildImage
		 */
		String result="";
		for(int i=0;i<length;i++){
			result=result+POSSIBILITY.charAt(random.nextInt(63));
		}
		return result;
	}

	public static Notebook getNotebookFromUID(String UID16, Context context){
		ArrayList<Notebook> list=Helpers.getNotebookList(context);
		for(Notebook a: list){
			if(a.getUID16().equals(UID16)){
				return a;
			}
		}
		return null;
	}

	public static Page getPageFromUID(String UID16,String parentUID ,Context context){
		ArrayList<Page> list= getNotebookFromUID(parentUID,context).getPages();
		for(Page a:list){
			if(a.getUID().equals(UID16)){
				return a;
			}
		}
		return null;
	}
	public static void addPageFromUID16(String parentUID, Page page, Context context){
		Notebook notebook = getNotebookFromUID(parentUID, context);
		ArrayList<Page> pageList = notebook.getPages();
		boolean doesPageExistAlready = false;
		for(int i=0;i<pageList.size();i++){
			if(pageList.get(i).getUID().equals(page.getUID())){
				pageList.set(i,page);
				doesPageExistAlready=true;
				break;
			}
		}
		if (!doesPageExistAlready) {
			pageList.add(page);
		}
		notebook.setPages(pageList);
		addToNotebookList(notebook, context);
	}
	/**
	This isColorDark method was copied word for word from the "Spectrum" library, written by
	Nathan Walters (and 5 other contributors), published to GitHub with an explicit MIT
	license, which has no restrictions, except that the creator is not liable for anything,
	and both the license and copyright notices must be written somewhere. This will be done
	 in the journal, references.txt and report.

	 The MIT License (MIT)

	 Copyright (c) 2016 The Blue Alliance

	 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	 *
	 * Walters, N. (2016). the-blue-alliance/spectrum. GitHub. Retrieved 15 November 2016, from https://github.com/the-blue-alliance/spectrum/blob/master/spectrum/src/main/java/com/thebluealliance/spectrum/internal/ColorUtil.java
	 */
	 public static boolean isColorDark(int color){
		double brightness = Color.red(color) * 0.299 +
				Color.green(color) * 0.587 +
				Color.blue(color) * 0.114;
		return brightness < 160;
	}
}
%%FirstBookLightOffsetDecoration

package com.twotowerstudios.virtualnotebookdesign.Misc;

import android.graphics.Rect;
import android.support.v7.widget.RecyclerView;
import android.view.View;

public class FirstBookLightOffsetDecoration extends RecyclerView.ItemDecoration {
	private int firstItemOffset;

	public FirstBookLightOffsetDecoration(int beginningOffset) {
		firstItemOffset = beginningOffset;}

	@Override
	public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
		super.getItemOffsets(outRect, view, parent, state);
		int dataSize = state.getItemCount();
		int position = parent.getChildAdapterPosition(view);
		if (dataSize > 0 && position ==  0) {
			outRect.set(firstItemOffset, 0, 0, 0);
		} else {
			outRect.set(0, 0, 0, 0);
		}
		/**if (dataSize > 0 && position == dataSize-1){
			outRect.set(0,0,mBottomOffset,0);
		}else {
			outRect.set(0, 0, 0, 0);
		}*/

	}
}
%%NewNotebookAdapter.java
package com.twotowerstudios.virtualnotebookdesign.NewNotebookDialog;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.support.v4.content.ContextCompat;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;

import com.twotowerstudios.virtualnotebookdesign.R;

import java.util.ArrayList;

/**
 * Created by Panther II on 10/11/2016.
 */

public class NewNotebookAdapter extends RecyclerView.Adapter<NewNotebookAdapter.ViewHolder>{
	Context context;
	ArrayList<Integer> colors = new ArrayList<>();
	int activeColor;
	FromAdapterInterface clickListener;
	public NewNotebookAdapter(){

	}

	public interface FromAdapterInterface {
		void clickListener(int color);
	}
	public static class ViewHolder extends RecyclerView.ViewHolder{
		public ImageView ivSwatch;
		public Toolbar toolbar;
		public ViewHolder(View itemView) {
			super(itemView);
			ivSwatch = (ImageView) itemView.findViewById(R.id.ivSwatch);
			toolbar = (Toolbar) itemView.findViewById(R.id.newnotebooktoolbar);
		}
	}
	public NewNotebookAdapter(Context context, ArrayList<Integer> colors, int activeColor, FromAdapterInterface clickListener){
		this.context=context;
		this.colors=colors;
		this.activeColor=activeColor;
		this.clickListener = clickListener;
	}

	@Override
	public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
		View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.colorcircle,parent,false);
		return new ViewHolder(v);
	}


	@Override
	public void onBindViewHolder(ViewHolder holder, final int position) {

		Drawable drawablefull = ContextCompat.getDrawable(context,R.drawable.colorcircle);
		Drawable drawableHollow = ContextCompat.getDrawable(context,R.drawable.coloroutlinecircle);
		if (position==activeColor){
			holder.ivSwatch.setImageDrawable(drawablefull.mutate());
		}else if (position!=activeColor){
			holder.ivSwatch.setImageDrawable(drawableHollow.mutate());
		}
		holder.ivSwatch.setColorFilter(colors.get(position));

		holder.ivSwatch.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				clickListener.clickListener(position);
				notifyDataSetChanged();
				activeColor=position;
			}
		});
	}
	/**
	 * Returns the total number of items in the data set held by the adapter.
	 *
	 * @return The total number of items in this adapter.
	 */
	@Override
	public int getItemCount() {
		return colors.size();
	}
}
%%NewNotebookFragment.java
package com.twotowerstudios.virtualnotebookdesign.NewNotebookDialog;


import android.content.DialogInterface;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.Toast;

import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;
import com.twotowerstudios.virtualnotebookdesign.NotebookSelection.NotebookSelection;
import com.twotowerstudios.virtualnotebookdesign.Objects.Notebook;
import com.twotowerstudios.virtualnotebookdesign.R;

import java.util.ArrayList;
import java.util.Random;


public class NewNotebookFragment extends DialogFragment implements NewNotebookAdapter.FromAdapterInterface {

	RecyclerView rvNewNotebook;
	int activeColorIndex, activeColor;
	ArrayList<Integer> colors;
	ArrayList<Notebook> notebookList;
	Toolbar toolbar;
	Switch swColors;
	EditText etNewName;
	/**ToAdapterInterface refresh;

	public interface ToAdapterInterface {
		void refreshData();
	}*/

		@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
							 Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_new_notebook,container,false);
	}

	@Override
	public void onViewCreated(View v, Bundle savedInstanceState){

		colors= Helpers.getPossibleColors(getContext());
		activeColorIndex =new Random().nextInt(colors.size());
		activeColor = colors.get(activeColorIndex);
		swColors = (Switch) v.findViewById(R.id.switch1);

		etNewName = (EditText) v.findViewById(R.id.etNewName);
		notebookList = Helpers.getNotebookList(getContext());
		toolbar = (Toolbar) v.findViewById(R.id.newnotebooktoolbar);
		toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {
			@Override
			public boolean onMenuItemClick(MenuItem item) {
				Log.d("Dialog", "onMenuItemClick: ");
				String nameLow=etNewName.getText().toString().toLowerCase();
				String nameReal=etNewName.getText().toString();
				if(nameLow.equalsIgnoreCase("")){
					Toast.makeText(getContext(),"Name can't be empty", Toast.LENGTH_SHORT).show();
					return false;
				}else{
					boolean notebookExists=false;
					try {
						for(int i=0;i<notebookList.size();i++){
							if (nameLow.equalsIgnoreCase(notebookList.get(i).getName())){
								Toast.makeText(getContext(),"Notebook already exists", Toast.LENGTH_SHORT).show();
								notebookExists=true;
								break;
							}
						}
					} catch (NullPointerException e) {
						Log.d("NewNotebookFrag","Notebooklist was empty, adding notebook");
					}
					if (!notebookExists){
						Toast.makeText(getContext(),"Created notebook called: \""+nameReal+"\"", Toast.LENGTH_SHORT).show();
						Log.d("NewNotebookFrag","Created notebook called:"+nameReal);
						((NotebookSelection)getActivity()).refreshData(new Notebook(nameReal,colors.get(activeColorIndex), Helpers.getSingleColorAccent(getContext(), activeColor)));
						dismiss();
						//refresh.refreshData();
					}

				}
				return false;
			}
		});
		toolbar.inflateMenu(R.menu.newnotebook);
		toolbar.setTitle("Create new Notebook");

		if(Helpers.isColorDark(activeColor)){
			toolbar.setTitleTextColor(getResources().getColor(R.color.md_dark_primary_text));
		}else{
			toolbar.setTitleTextColor(getResources().getColor(R.color.md_light_primary_text));
		}
		rvNewNotebook = (RecyclerView) v.findViewById(R.id.rvNewNotebook);
		final GridLayoutManager rvNotebookManager = new GridLayoutManager(getContext(),6);
		rvNewNotebook.setLayoutManager(rvNotebookManager);
		NewNotebookAdapter adapter= new NewNotebookAdapter(getContext(), Helpers.getPossibleColors(getContext()), activeColorIndex, this);
		rvNewNotebook.setVisibility(View.GONE);
		toolbar.setBackgroundColor(activeColor);
		rvNewNotebook.setAdapter(adapter);
		Log.d("onViewCreated", ""+rvNewNotebook.getWidth());

		swColors.setOnCheckedChangeListener(new Switch.OnCheckedChangeListener(){
			@Override
			public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
				if (b){
					rvNewNotebook.setVisibility(View.VISIBLE);
				}else{
					rvNewNotebook.setVisibility(View.GONE);
				}
			}
		});
	}
	@Override
	public void onResume(){
		super.onResume();
		/*DisplayMetrics displaymetrics = new DisplayMetrics();
		getActivity().getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
		int height = displaymetrics.heightPixels;
		int width = displaymetrics.widthPixels;
		getDialog().getWindow().setLayout((int)(width*0.9),(int)(height*0.8));*/
		DisplayMetrics displaymetrics = new DisplayMetrics();
		getActivity().getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
		int height = displaymetrics.heightPixels;
		int width = displaymetrics.widthPixels;
		WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
		lp.copyFrom(getDialog().getWindow().getAttributes());
		lp.width = (int)(width*0.9);
		lp.height = WindowManager.LayoutParams.WRAP_CONTENT;

		getDialog().getWindow().setAttributes(lp);
	}
	public static NewNotebookFragment newInstance() {
			NewNotebookFragment f = new NewNotebookFragment();
			return f;
	}
	public void changeColor(int position){
		if(Helpers.isColorDark(colors.get(position))){
			toolbar.setTitleTextColor(getResources().getColor(R.color.md_dark_primary_text));
		}else{
			toolbar.setTitleTextColor(getResources().getColor(R.color.md_light_primary_text));
		}
		toolbar.setBackgroundColor(colors.get(position));
		this.activeColorIndex =position;
		this.activeColor= colors.get(activeColorIndex);
	}

	@Override
	public void onDismiss(DialogInterface dialog) {
		super.onDismiss(dialog);
	}

	@Override
	public void clickListener(int color) {
		changeColor(color);
	}
}
%%NotebookAdapterToAct.java
package com.twotowerstudios.virtualnotebookdesign.NotebookMain;

/**
 * Created by Panther II on 24/12/2016.
 */

public interface NotebookAdapterToAct{
	/**Type:
	 * 1 = everypage
	 * 2 = favorites
	 */
	void clickListener(int position, boolean onlyFavorites);
}
%%NotebookMainActivity.java
package com.twotowerstudios.virtualnotebookdesign.NotebookMain;

import android.content.Intent;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.os.Bundle;
import android.support.design.widget.AppBarLayout;
import android.support.design.widget.CollapsingToolbarLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.TabLayout;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.format.DateUtils;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;
import com.twotowerstudios.virtualnotebookdesign.NotebookMain.Fragments.NewPage.NewPageFragment;
import com.twotowerstudios.virtualnotebookdesign.Objects.Notebook;
import com.twotowerstudios.virtualnotebookdesign.Objects.Page;
import com.twotowerstudios.virtualnotebookdesign.PageActivityMain.PageActivityMain;
import com.twotowerstudios.virtualnotebookdesign.R;

import org.parceler.Parcels;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;

public class NotebookMainActivity extends AppCompatActivity implements NewPageFragment.OnFragmentInteractionListener, NotebookAdapterToAct{

	Toolbar toolbar;
	Notebook notebook;
	FloatingActionButton fabnotebookmain;
	CollapsingToolbarLayout collapsingToolbarLayout;
	String parent;
	String notebookUID16;
	TextView tvSub;
	ViewPager viewPager;
	boolean isFirstTime;
	TabLayout tabLayout;
	ArrayList<Page> pageList;
	ViewPagerAdapter viewPagerAdapter;
	RelativeLayout emptyNotebook;
	LinearLayout notEmptyNotebook;

	@Override
	public void clickListener(int position, boolean onlyFavorites) {
		Intent intent = new Intent(this, PageActivityMain.class);


		if(onlyFavorites){
			ArrayList<Page> favPageList = new ArrayList<>();
			for(Page p: pageList) {
				if(p.isFavorite()){
					favPageList.add(p);
				}
			}
			Collections.sort(favPageList);
			intent.putExtra("page", Parcels.wrap(favPageList.get(position)));

		}else{
			intent.putExtra("page", Parcels.wrap(pageList.get(position)));
		}
		intent.putExtra("notebookUID16", notebookUID16);
		intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
		startActivity(intent);
	}


	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_notebook_main);
		isFirstTime=true;
		if (notebook==null) {
			Log.d("NotebookMainActivity", "notebook == null");
			if (getIntent().getStringExtra("parent").equals("NotebookSelection")
					||(getIntent().getStringExtra("parent").equals("MainActivity"))) {
				notebook = Parcels.unwrap(getIntent().getParcelableExtra("notebook"));
			}else if(getIntent().getStringExtra("parent").equals("PageActivityMain")){
				notebook = Helpers.getNotebookFromUID(getIntent().getStringExtra("notebookUID16"), getApplicationContext());
			}

		}
		pageList = notebook.getPages();
		notebookUID16=notebook.getUID16();
		emptyNotebook = (RelativeLayout) findViewById(R.id.emptyNotebook);
		notEmptyNotebook = (LinearLayout) findViewById(R.id.notEmptyNotebook);
		fabnotebookmain = (FloatingActionButton) findViewById(R.id.fabnotebookmain);
		fabnotebookmain.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
				Fragment prev = getSupportFragmentManager().findFragmentByTag("dialog");
				if (prev != null) {
					ft.remove(prev);
				}
				ft.addToBackStack(null);

				// Create and show the dialog.
				NewPageFragment newFragment = NewPageFragment.newInstance(pageList, notebook.getAccentColor());
				newFragment.show(ft, "dialog");
			}
		});
		if (pageList.size()==0||pageList==null){ //if notebook is empty
			//pageList = InitNotebooks.populateDebugNotebookPages(pageList, 15);
			emptyNotebook.setVisibility(View.VISIBLE);
			fabnotebookmain.setVisibility(View.GONE);
			notEmptyNotebook.setVisibility(View.GONE);
			emptyNotebook.setOnClickListener(new View.OnClickListener() {
				@Override
				public void onClick(View view) {
					FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
					Fragment prev = getSupportFragmentManager().findFragmentByTag("dialog");
					if (prev != null) {
						ft.remove(prev);
					}
					ft.addToBackStack(null);
					NewPageFragment newFragment = NewPageFragment.newInstance(pageList, notebook.getAccentColor());
					newFragment.show(ft, "dialog");

				}
			});
		}else{ //if notebook is NOT empty
			emptyNotebook.setVisibility(View.GONE);
			notEmptyNotebook.setVisibility(View.VISIBLE);
			viewPager = (ViewPager) findViewById(R.id.viewpager);

			viewPager.setAdapter(new ViewPagerAdapter(getSupportFragmentManager(),pageList,Helpers.getSingleColorAccent(this,notebook.getColor()),this));

			tabLayout = (TabLayout) findViewById(R.id.sliding_tabs);
			tabLayout.setupWithViewPager(viewPager);
		}
		parent = getIntent().getExtras().getString("parent");
		Toast.makeText(getApplicationContext(), "Parent is: "+ parent, Toast.LENGTH_SHORT).show();
		tvSub = (TextView) findViewById(R.id.tvSub);
		tvSub.setText("Last Modified: "+ DateUtils.getRelativeTimeSpanString(notebook.getLastModified(), Helpers.getCurrentTimeInMillis(), DateUtils.SECOND_IN_MILLIS));

		AppBarLayout appbarlayoutNotebook = (AppBarLayout) findViewById(R.id.appbarlayoutNotebook);
		appbarlayoutNotebook.setBackgroundColor(notebook.getColor());
		collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapseToolbarNotebook);
		toolbar = (Toolbar) findViewById(R.id.toolbarNotebook);
		setSupportActionBar(toolbar);
		toolbar.setBackgroundColor(notebook.getColor());
		getSupportActionBar().setTitle(notebook.getName());
		getSupportActionBar().setSubtitle("Last modified: " + DateUtils.getRelativeTimeSpanString(notebook.getLastModified(), Helpers.getCurrentTimeInMillis(), DateUtils.SECOND_IN_MILLIS));
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
		if(Helpers.isColorDark(notebook.getColor())){
			collapsingToolbarLayout.setExpandedTitleColor(ContextCompat.getColor(getApplicationContext(), R.color.md_white_1000));
			collapsingToolbarLayout.setCollapsedTitleTextColor(ContextCompat.getColor(getApplicationContext(), R.color.md_white_1000));
			tvSub.setTextColor(ContextCompat.getColor(getApplicationContext(), R.color.md_white_1000));
		}else{
			collapsingToolbarLayout.setExpandedTitleColor(ContextCompat.getColor(getApplicationContext(), R.color.md_black_1000));
			collapsingToolbarLayout.setCollapsedTitleTextColor(ContextCompat.getColor(getApplicationContext(), R.color.md_black_1000));
			tvSub.setTextColor(ContextCompat.getColor(getApplicationContext(), R.color.md_black_1000));
		}
		toolbar.setTitleTextColor(Color.parseColor("#ffffff"));
		fabnotebookmain.setBackgroundTintList(ColorStateList.valueOf(Helpers.getSingleColorAccent(getApplicationContext(),notebook.getColor())));
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
			// Respond to the action bar's Up/Home button
			case android.R.id.home:
				// Launch the correct Activity here
				finish();
				/*if (parent.equals("MainActivity")) {
					Intent intent = new Intent(this, NotebookSelection.class);
					intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
					startActivity(intent);
					finish();
					return true;
				}else if(parent.equals("NotebookSelection")){
					Intent intent = new Intent(this, MainActivity.class);
					intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
					startActivity(intent);
					finish();
					return true;
				}*/

		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	protected void onResume() {
		super.onResume();
		if(isFirstTime){
			isFirstTime=false;
		}else{
			pageList.clear();
			pageList.addAll(Helpers.getNotebookFromUID(notebookUID16, getApplicationContext()).getPages());
			viewPager.setAdapter(new ViewPagerAdapter(getSupportFragmentManager(), pageList, Helpers.getSingleColorAccent(this,notebook.getColor()), this));
			tabLayout.setupWithViewPager(viewPager);
		}
	}

	@SuppressWarnings("WrongConstant")
	@Override
	public void onFragmentInteraction(String name, int pageNum, Calendar cal) {
		if (cal.get(Calendar.YEAR) != 1970) {
			pageList.add(new Page(name, pageNum, cal.getTimeInMillis()+43200000, notebook.getUID16()));
		} else {
			pageList.add(new Page(name, pageNum, 0, notebook.getUID16()));
		}
		notebook.setLastModified(Helpers.getCurrentTimeInMillis());
		notebook.setPages(pageList);
		Helpers.addToNotebookList(notebook, getApplicationContext());
		tvSub.setText("Last Modified: "+ DateUtils.getRelativeTimeSpanString(notebook.getLastModified(), Helpers.getCurrentTimeInMillis(), DateUtils.SECOND_IN_MILLIS));
		getSupportActionBar().setSubtitle("Last modified: " + DateUtils.getRelativeTimeSpanString(notebook.getLastModified(), Helpers.getCurrentTimeInMillis(), DateUtils.SECOND_IN_MILLIS));

		if (notebook == null) {
			Log.d("OnFragmentInteraction", "notebook == null");
		}
		emptyNotebook.setVisibility(View.GONE);
		notEmptyNotebook.setVisibility(View.VISIBLE);
		viewPager = (ViewPager) findViewById(R.id.viewpager);
		viewPagerAdapter = new ViewPagerAdapter(getSupportFragmentManager(),pageList, notebook.getColor(), this);
		viewPager.setAdapter(viewPagerAdapter);

		tabLayout = (TabLayout) findViewById(R.id.sliding_tabs);
		tabLayout.setupWithViewPager(viewPager);
		fabnotebookmain.setVisibility(View.VISIBLE);
	}
}
%%ViewPagerAdapter.java
package com.twotowerstudios.virtualnotebookdesign.NotebookMain;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentStatePagerAdapter;

import com.twotowerstudios.virtualnotebookdesign.NotebookMain.Fragments.EveryPageFragment;
import com.twotowerstudios.virtualnotebookdesign.NotebookMain.Fragments.FavoritesFragment;
import com.twotowerstudios.virtualnotebookdesign.Objects.Page;

import java.util.ArrayList;


public class ViewPagerAdapter extends FragmentStatePagerAdapter {
	private static final int NUM_ITEMS = 2;
	private ArrayList<Page> pageList;
	private int color;
	private NotebookAdapterToAct interf;
	private final String titles[] = {"All Pages", "Favorites"};


	public ViewPagerAdapter(FragmentManager fm, ArrayList<Page> list, int color, NotebookAdapterToAct interf) {
		super(fm);
		pageList = list;
		this.color=color;
		this.interf = interf;
	}
	@Override
	public Fragment getItem(int position) {
		switch (position) {
			case 0:
				return EveryPageFragment.newInstance(0, titles[0], pageList,color, interf);
			case 1:
				return FavoritesFragment.newInstance(1, titles[1], pageList,color, interf);
			default:
				return null;
		}
	}

	@Override
	public CharSequence getPageTitle(int position) {
		return titles[position];
	}

	@Override
	public int getCount() {
		return NUM_ITEMS;
	}

	@Override
	public int getItemPosition(Object object) {
		return POSITION_NONE;
	}
	public void refreshList(ArrayList<Page> list){
		pageList.clear();
		pageList.addAll(list);
		notifyDataSetChanged();
	}
}
%%NotebookSelection.java
package com.twotowerstudios.virtualnotebookdesign.NotebookSelection;

import android.animation.ObjectAnimator;
import android.content.Intent;
import android.os.Bundle;
import android.os.Environment;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;

import com.mikepenz.materialdrawer.AccountHeader;
import com.mikepenz.materialdrawer.model.ProfileDrawerItem;
import com.mikepenz.materialdrawer.model.interfaces.IProfile;
import com.twotowerstudios.virtualnotebookdesign.Initialization.InitNotebooks;
import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;
import com.twotowerstudios.virtualnotebookdesign.Misc.SharedPrefs;
import com.twotowerstudios.virtualnotebookdesign.NewNotebookDialog.NewNotebookFragment;
import com.twotowerstudios.virtualnotebookdesign.NotebookMain.NotebookMainActivity;
import com.twotowerstudios.virtualnotebookdesign.Objects.Notebook;
import com.twotowerstudios.virtualnotebookdesign.R;

import org.parceler.Parcels;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class NotebookSelection extends AppCompatActivity implements NotebookSelectionAdapter.SelectionToNotebookInterface {
    private AccountHeader accountHeader;
    private RecyclerView rvNotebookSelection;
    private RecyclerView.Adapter rvNotebookSelectionAdapter;
    private ArrayList<Notebook> notebookSelectionCardList;
	private FloatingActionButton fabSelection, fabAddBook;
	static boolean isMainfabOpen;
	private boolean isFirstTime;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_notebook_selection);
		isFirstTime=true;
		SharedPrefs.setBoolean(getApplicationContext(), "debug", false);
		File nomedia = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), ".nomedia");
		if(!nomedia.exists()){
			try {
				nomedia.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if(Helpers.getStringFromFile("Notebooks.json", getApplicationContext()).equals("")){
			File file = new File(getFilesDir(),"Notebooks.json");
		}
		if(InitNotebooks.isDebug(getApplicationContext())){
			Log.d("isDebugNoteSelect", "DEBUG MODE = true;");
			InitNotebooks.populateDebugBooks(getApplicationContext(), InitNotebooks.isDebug(getApplicationContext()));
		}


		//================================================
		isMainfabOpen = false;
		fabSelection = (FloatingActionButton) findViewById(R.id.fabSelection);
		fabAddBook = (FloatingActionButton) findViewById(R.id.fabAddBlock);
		fabSelection.setOnClickListener(new View.OnClickListener(){
			@Override
			public void onClick(View view) {
				if (!isMainfabOpen) {

					fabAddBook.show();

					isMainfabOpen = true;
					ObjectAnimator openAddBookfab = ObjectAnimator.ofFloat(fabAddBook, View.TRANSLATION_Y, 200,0); openAddBookfab.start();
					ObjectAnimator rotateMainfab = ObjectAnimator.ofFloat(fabSelection, View.ROTATION, 0, 135); rotateMainfab.start();

				} else if(isMainfabOpen){
					isMainfabOpen = false;
					ObjectAnimator rotateMainfab = ObjectAnimator.ofFloat(fabSelection, View.ROTATION, 135, 270); rotateMainfab.start();
					ObjectAnimator closeFirstSubfab = ObjectAnimator.ofFloat(fabAddBook, View.TRANSLATION_Y, 0,200); closeFirstSubfab.start();
					fabAddBook.hide();
				}
			}


		});
		fabAddBook.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
                showDialog();

			}
		});
		//============================================
		rvNotebookSelection = (RecyclerView) findViewById(R.id.rvnotebookselection);
        final LinearLayoutManager rvNotebookSelectionManager = new LinearLayoutManager(this);
        rvNotebookSelection.setLayoutManager(rvNotebookSelectionManager);
		notebookSelectionCardList = Helpers.getNotebookList(getApplicationContext());
        //prepareNotebookSelectionCards();
        rvNotebookSelectionAdapter = new NotebookSelectionAdapter(this, notebookSelectionCardList, this);
        rvNotebookSelection.setAdapter(rvNotebookSelectionAdapter);
		//===================================================================
        final IProfile h1 = new ProfileDrawerItem().withName("Header 1");
        final IProfile h2 = new ProfileDrawerItem().withName("Header 2");
        final IProfile h3 = new ProfileDrawerItem().withName("Header 3");
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
		getSupportActionBar().setTitle("Notebooks");
        /**accountHeader = new AccountHeaderBuilder()
                .withActivity(this)
                .withHeaderBackground(R.drawable.header)
                .addProfiles(
                        h1,h2,h3
                )
                .withOnAccountHeaderListener(new AccountHeader.OnAccountHeaderListener() {
                    @Override
                    public boolean onProfileChanged(View view, IProfile profile, boolean current) {
                        if (profile == h1){
                            Glide.with(getApplicationContext()).load(R.drawable.header).into(accountHeader.getHeaderBackgroundView());
                        } else if (profile == h2){
                            Glide.with(getApplicationContext()).load(R.drawable.header2).into(accountHeader.getHeaderBackgroundView());
                        } else if (profile == h3){
                            Glide.with(getApplicationContext()).load(R.drawable.header3).into(accountHeader.getHeaderBackgroundView());
                        }
                        return false;
                    }
                })
                .build();
        Drawer drawer = new DrawerBuilder()
                .withActivity(this)
                .withToolbar(toolbar)

                .withAccountHeader(accountHeader)
                .addDrawerItems(
                        new PrimaryDrawerItem().withName("Main Menu").withIdentifier(1),
                        new PrimaryDrawerItem().withName("Notebooks").withDescription("Full list of notebooks").withIdentifier(2),
                        new DividerDrawerItem(),
                        new SecondaryDrawerItem().withName("I'm secondary #1").withDescription("I'm a bit more faded"),
                        new SecondaryDrawerItem().withName("I'm secondary #2").withDescription("I'm also just as faded as my brother, but I'm very long cause fuck it")

                )
                .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {
                    @Override
                    public boolean onItemClick(View view, int position, IDrawerItem drawerItem) {
                        //if (drawerItem != null) {
                         //Intent intent = null;
                         //if (drawerItem.getIdentifier() == 1) {
                         //intent = new Intent(DrawerActivity.this, CompactHeaderDrawerActivity.class);
                         //}
                        if (drawerItem != null){
                            Intent intent = null;
                            if (position == 1){
                                intent = new Intent(NotebookSelection.this, MainActivity.class);
                            }else if (position == 2){

                            }
                            if (intent != null){
                                //intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
                                startActivity(intent);
								finish();
                            }
                        }
                        return false;
                    }
                })
                .build();
		drawer.setSelection(2);*/
		//=========================================================
//        Glide.with(this).load(R.drawable.header2).into(accountHeader.getHeaderBackgroundView());

    }

    private void showDialog() {

        // DialogFragment.show() will take care of adding the fragment
        // in a transaction.  We also want to remove any currently showing
        // dialog, so make our own transaction and take care of that here.
        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
        Fragment prev = getSupportFragmentManager().findFragmentByTag("dialog");
        if (prev != null) {
            ft.remove(prev);
        }
        ft.addToBackStack(null);

        // Create and show the dialog.
        NewNotebookFragment newFragment = NewNotebookFragment.newInstance();

        newFragment.show(ft, "dialog");


    }
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        //noinspection SimplifiableIfStatement
        if (id == R.id.action_delete) {
            //showEditDialog();
            getApplicationContext().deleteFile("Notebooks.json");
            notebookSelectionCardList.clear();
            rvNotebookSelectionAdapter.notifyDataSetChanged();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

	public static boolean isMainfabOpen(){
		return isMainfabOpen;
	}

	public void refreshData(Notebook newNotebook) {
		Helpers.addToNotebookList(newNotebook, getApplicationContext());
		notebookSelectionCardList.clear();
		notebookSelectionCardList.addAll(Helpers.getNotebookList(getApplicationContext()));
		rvNotebookSelectionAdapter.notifyDataSetChanged();
		rvNotebookSelection.getLayoutManager().scrollToPosition(notebookSelectionCardList.size());
	}

	@Override
	public void openNotebookActivity(int position) {
		Intent intent = new Intent(this, NotebookMainActivity.class);
		intent.putExtra("notebook", Parcels.wrap(notebookSelectionCardList.get(position)));
        intent.putExtra("parent","NotebookSelection");
		startActivity(intent);
	}

    @Override
    protected void onResume() {
		if(isFirstTime){
			isFirstTime=false;
		}else{
			notebookSelectionCardList.clear();
			notebookSelectionCardList.addAll(Helpers.getNotebookList(getApplicationContext()));
			rvNotebookSelectionAdapter.notifyDataSetChanged();
		}
        super.onResume();

    }
}
%%NotebookSelectionAdapter.java
package com.twotowerstudios.virtualnotebookdesign.NotebookSelection;

import android.content.Context;
import android.support.v7.widget.CardView;
import android.support.v7.widget.RecyclerView;
import android.text.format.DateUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;
import com.twotowerstudios.virtualnotebookdesign.Objects.Notebook;
import com.twotowerstudios.virtualnotebookdesign.R;

import java.util.List;

/**
 * Created by Panther II on 22/10/2016.
 */

public class NotebookSelectionAdapter extends RecyclerView.Adapter<NotebookSelectionAdapter.ViewHolder> /*implements NewNotebookFragment.ToAdapterInterface*/{
	Context context;
	List<Notebook> notebookList;

	SelectionToNotebookInterface Interface;

	public interface SelectionToNotebookInterface{
		void openNotebookActivity(int position);
	}

	public static class ViewHolder extends RecyclerView.ViewHolder{

		public TextView tvCardNameSel, tvCardSub, tvPageCount;
		public ImageView ivCardImage;
		public CardView card;

		public ViewHolder(View view){
			super(view);
			ivCardImage = (ImageView) view.findViewById(R.id.tvCardImage);
			tvCardNameSel = (TextView) view.findViewById(R.id.tvCardNameSel);
			tvCardSub = (TextView) view.findViewById(R.id.tvCardSub);
			tvPageCount = (TextView) view.findViewById(R.id.tvPageCount);
			card = (CardView) view.findViewById(R.id.notebookSelectionCard);
		}
	}
	public NotebookSelectionAdapter(Context context, List<Notebook> list, SelectionToNotebookInterface Interface){
		this.context = context;
		this.notebookList = list;
		this.Interface=Interface;
	}
	@Override
	public NotebookSelectionAdapter.ViewHolder onCreateViewHolder (ViewGroup parent, int viewType){
	View v = LayoutInflater.from(parent.getContext())
	.inflate(R.layout.notebookselectioncard, parent, false);
	return new ViewHolder(v);
	}


	 @Override
	 public void onBindViewHolder(ViewHolder holder,  int position){
	 	 Notebook notebookSelection = notebookList.get(position);
		 final int position2 = position;
	 	 holder.tvCardNameSel.setText(""+notebookSelection.getName());
	 	 holder.tvCardSub.setText("Last modified: "+
				 DateUtils.getRelativeTimeSpanString(notebookSelection.getLastModified(), Helpers.getCurrentTimeInMillis(), DateUtils.SECOND_IN_MILLIS));
	 	 holder.tvPageCount.setText("" +notebookSelection.getNumberOfPages() + " Pages");
	 	 holder.ivCardImage.setColorFilter(notebookSelection.getColor());
		 holder.card.setOnClickListener(new View.OnClickListener() {
			 @Override
			 public void onClick(View view) {
				 Interface.openNotebookActivity(position2);
			 }
		 });
	 }
	 @Override
	 public int getItemCount() {
	 	return notebookList.size();
	 }
	/**@Override
	public void refreshData() {
		notifyDataSetChanged();
	}*/
}
%%ScrollAwareFABBehaviour.java
package com.twotowerstudios.virtualnotebookdesign.NotebookSelection;

import android.content.Context;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.view.ViewCompat;
import android.util.AttributeSet;
import android.view.View;

import com.twotowerstudios.virtualnotebookdesign.R;

/**
 * Created by Panther II on 15/11/2016.
 */

public class ScrollAwareFABBehavior extends FloatingActionButton.Behavior {

	@Override
	public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout,
									   FloatingActionButton child, View directTargetChild, View target, int nestedScrollAxes) {
		return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL ||
				super.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target,
						nestedScrollAxes);
	}

	@Override
	public void onNestedScroll(CoordinatorLayout coordinatorLayout, FloatingActionButton child,
							   View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {
		super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed,
				dyUnconsumed);

		if (dyConsumed > 0 && child.getVisibility() == View.VISIBLE) {
			child.hide();

		} else if (dyConsumed < 0 && child.getVisibility() != View.VISIBLE) {
			if (child.getId()== R.id.fabAddBlock){
				if(NotebookSelection.isMainfabOpen()){
					child.show();
				}else{

				}
			}else{
				child.show();
			}

		}
	}
	public ScrollAwareFABBehavior(Context context, AttributeSet attrs) {
		super();
	}
}
%%Page.java
package com.twotowerstudios.virtualnotebookdesign.Objects;

import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;

import org.parceler.Parcel;

import java.util.ArrayList;


@Parcel
public class Page implements Comparable<Page>{
	public ArrayList<ChildBase> content;
	private String name;
	int pageNumber;
	long lastModifiedMillis;
	long dateMillis;
	boolean isFavorite;
	String UID16;

	public void setContent(ArrayList<ChildBase> content) {
		this.content = content;
	}

	String parentUID;

	public Page(String name, int pageNumber, String parentUID){
		this.name = name;
		this.pageNumber = pageNumber;
		this.content = new ArrayList<ChildBase>();
		this.lastModifiedMillis = Helpers.getCurrentTimeInMillis();
		this.isFavorite=false;
		this.dateMillis=0;
		this.parentUID=parentUID;
		UID16 ="p"+Helpers.generateUniqueId(16);
	}
	public Page(String name, int pageNumber, long dateMillis, String parentUID){
		this.name = name;
		this.pageNumber = pageNumber;
		this.content = new ArrayList<ChildBase>();
		this.lastModifiedMillis = Helpers.getCurrentTimeInMillis();
		this.isFavorite=false;
		this.parentUID=parentUID;
		this.dateMillis=dateMillis;
		UID16 ="p"+Helpers.generateUniqueId(16);
	}
	public Page(){}

	public String getUID() {
		return UID16;
	}

	public String getParentUID() {return parentUID;}

	public void setParentUID(String parentUID) {this.parentUID = parentUID;}

	public void setUID16(String UID16) {this.UID16 = UID16;}

	public void addToPage(ChildBase newObject){content.add(newObject);}
	public void removeFromPage(ChildBase object){content.remove(object);}
	public void removeFromPage(int index){content.remove(index);}
	public void setLastModifiedMillis(long lastModifiedMillis) {
		this.lastModifiedMillis = lastModifiedMillis;}
	public void setName(String name){this.name = name;}
	public void setPageNumber(int pageNumber){this.pageNumber = pageNumber;}
	public ArrayList<ChildBase> getContent(){return content;}
	public int getPageNumber(){return pageNumber;}
	public long getLastModifiedMillis() {return lastModifiedMillis;}
	public String getName(){return name;}
	public int getNumberOfItems(){return content.size();}
	public boolean isFavorite(){return isFavorite;}
	public void setIsFavorite(boolean isFavorite){this.isFavorite=isFavorite;}

	public void setDateMillis(long dateMillis) {this.dateMillis = dateMillis;}

	public long getDateMillis() {return dateMillis;}

	@Override
	public int compareTo(Page page) {

		return this.pageNumber-page.pageNumber;
	}
}
%%ChildBase.java
package com.twotowerstudios.virtualnotebookdesign.Objects;

import android.content.Context;
import android.net.Uri;
import android.os.Environment;

import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;

import org.parceler.Parcel;

@Parcel
public class ChildBase {
	//public final int TEXT=0,IMAGE=1,DRIVE=2;
	String title;
	String UID16;
	String pageUID;
	String notebookUID;

	String uri;



	public ChildBase(){}
	int childType;
	/**Drive*/
	String driveId;
	int driveType;

	public Uri getUri() {
		return Uri.parse(uri);
	}

	public boolean doesUriExist(){
		return !(uri == null || uri.equals(""));
	}
	public void setUri(Uri uri) {
		this.uri = uri.toString();
	}

	public ChildBase(int driveType, String name, String notebookUID, String pageUID, String driveId){
		this.driveType=driveType;
		this.title=name;
		this.driveId=driveId;
		this.UID16= "d"+ Helpers.generateUniqueId(16);
		this.pageUID=pageUID;
		this.notebookUID =notebookUID;
		this.childType=2;
	}
	public int getType(){return driveType;}
	public void setDriveId(String driveId) {
		this.driveId = driveId;
	}
	public String getDriveId() {
		return driveId;
	}
	/**Image*/
	String ImageUID;
	String path;
	public ChildBase(String name, String ImageUID, String notebookUID, String pageUID, Uri uri, Context context){
		this.title =name;
		this.ImageUID=ImageUID;
		path=context.getExternalFilesDir(Environment.DIRECTORY_PICTURES)+"/"+ImageUID+".png";
		char[] charar = ImageUID.toCharArray();
		charar[0]='c';
		UID16 = charar.toString();
		this.notebookUID = notebookUID;
		this.pageUID=pageUID;
		this.childType=1;
		this.uri=uri.toString();
	}
	public void setPath(String path) {
		this.path = path;
	}

	public void setNotebookUID(String notebookUID) {
		this.notebookUID = notebookUID;
	}

	public String getPath() {
		return path;
	}
	public String getImageUID() {
		return ImageUID;
	}
	public void setImageUID(String imageUID) {
		ImageUID = imageUID;
	}

	/**Text*/
	String text;
	public ChildBase(String title, String text, String notebookUID, String pageUID){
		this.title=title;
		this.text=text;
		UID16= "t"+Helpers.generateUniqueId(16);
		this.notebookUID = notebookUID;
		this.pageUID=pageUID;
		this.childType=0;
	}
	public String getText() {
		return text;
	}
	public void setText(String text) {
		this.text = text;
	}

	/**   */
	public String getNotebookUID() {
		return notebookUID;
	}
	public String getPageUID() {return pageUID;}

	public void setPageUID(String pageUID) {
		this.pageUID = pageUID;
	}

	public String getUID16() {
		return UID16;
	}
	public String getTitle() {
		return title;
	}


	public void setTitle(String title) {
		this.title = title;
	}
	public int getChildType() {return childType;}

}
%%Notebook.java
package com.twotowerstudios.virtualnotebookdesign.Objects;

import android.content.Context;

import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;

import org.parceler.Parcel;

import java.util.ArrayList;

@Parcel
public class Notebook {
	String name;
	int color,accentColor;
	long lastModified;
	String UID16;
	ArrayList<Page> pages;

	public Notebook(String name, int color,
					int debugNumOfPages, long lastModified, Context context){
		this.name = name;
		this.lastModified = lastModified;
		this.color = color;
		this.accentColor=Helpers.getSingleColorAccent(context,color);
		this.pages = new ArrayList<>();
		this.UID16 = "n"+Helpers.generateUniqueId(16);
	}
	public Notebook(String name, int color, int accentColor){
		this.name=name;
		this.color=color;
		this.lastModified=Helpers.getCurrentTimeInMillis();
		this.accentColor=accentColor;
		this.pages = new ArrayList<>();
		this.UID16 = "n"+Helpers.generateUniqueId(16);
	}
	public Notebook(){}
	public int getColor() {return  color;}

	public String getUID16() {return UID16;}

	public void setUID16(String UID16) {this.UID16 = UID16;}

	public void setColor(int color) {this.color = color;}

	public int getAccentColor() {return accentColor;}

	public void setAccentColor(int accentColor) {this.accentColor = accentColor;}

	public String getName() {return  name;}

	public void setName(String name) { this.name = name;}

	public long getLastModified() {return  lastModified;}

	public void setLastModified(long lastModified) {
		this.lastModified = lastModified;
	}


	public int getNumberOfPages(){return pages.size();}


	public ArrayList<Page> getPages() {
		return pages;
	}
	public void setPages(ArrayList<Page> list){pages=list;
	}
	public void addPage(Page page){
		pages.add(page);
	}
}
%%ImageZoomActivity.java
package com.twotowerstudios.virtualnotebookdesign.PageActivityMain;

import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;

import com.davemorrissey.labs.subscaleview.ImageSource;
import com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView;
import com.twotowerstudios.virtualnotebookdesign.Objects.ChildBase;
import com.twotowerstudios.virtualnotebookdesign.R;

import org.parceler.Parcels;

public class ImageZoomActivity extends AppCompatActivity {
	ChildBase image;
	Toolbar tbfullimage;
	SubsamplingScaleImageView ivFullscreenPage;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.fragment_image_zoom);
		image = Parcels.unwrap(getIntent().getParcelableExtra("imagechild"));


		tbfullimage = (Toolbar)findViewById(R.id.tbfullimage);
		setSupportActionBar(tbfullimage);
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
		getSupportActionBar().setTitle(image.getTitle());
		tbfullimage.setTitleTextColor(Color.parseColor("#ffffff"));
		tbfullimage.setNavigationIcon(R.drawable.ic_close_white_24dp);
		tbfullimage.setNavigationOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				finish();
			}
		});
		ivFullscreenPage = (SubsamplingScaleImageView) findViewById(R.id. ivFullscreenPage);
		ivFullscreenPage.setOrientation(SubsamplingScaleImageView.ORIENTATION_USE_EXIF);
		ivFullscreenPage.setImage(ImageSource.uri(image.getUri()));
		ivFullscreenPage.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				finish();
			}
		});
	}

	@Override
	protected void onResume() {
		super.onResume();
	}
}
%%PageActivityMain
package com.twotowerstudios.virtualnotebookdesign.PageActivityMain;

import android.Manifest;
import android.animation.ObjectAnimator;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.content.res.AppCompatResources;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.StaggeredGridLayoutManager;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;

import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;
import com.twotowerstudios.virtualnotebookdesign.Misc.SharedPrefs;
import com.twotowerstudios.virtualnotebookdesign.Objects.ChildBase;
import com.twotowerstudios.virtualnotebookdesign.Objects.Page;
import com.twotowerstudios.virtualnotebookdesign.R;

import org.parceler.Parcels;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class PageActivityMain extends AppCompatActivity implements PageActivityAdapter.PageAdapterToAct, NewPageChildFragment.OnFragmentInteractionListener, ModalBottomSheet.OnModalBottomSheetListener {

	Toolbar tbpagemain;
	RecyclerView rvpagemain;
	Page page;
	ArrayList<ChildBase> contents = new ArrayList<>();
	String notebookUID16;
	boolean isMainfabOpen;
	/*LinearLayout bottom_drawer;
	BottomSheetBehavior bottomSheetBehavior;*/
	FloatingActionButton fabPageMain1, fabTextChild, fabImageChild;
	private boolean allowCamera;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		page = Parcels.unwrap(getIntent().getParcelableExtra("page"));
		contents = page.getContent();
		//DEBUG, REMOVE
		/**if (true) {
			ArrayList<ChildBase> newcontent = new ArrayList<>();
			for (ChildBase a : contents) {
				if (a.getPageUID() == null) {
					a.setPageUID(page.getUID());
					a.setNotebookUID(page.getParentUID());

				}
				newcontent.add(a);
			}
			page.setContent(newcontent);
			Helpers.addPageFromUID16(page.getParentUID(), page, getApplicationContext());
		}*/

		notebookUID16 = getIntent().getStringExtra("notebookUID16");
		setContentView(R.layout.activity_page_main);

		allowCamera = ContextCompat.checkSelfPermission(this,
				Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED;
		tbpagemain = (Toolbar) findViewById(R.id.tbpagemain);
		rvpagemain = (RecyclerView) findViewById(R.id.rvpagemain);
		setSupportActionBar(tbpagemain);
		tbpagemain.inflateMenu(R.menu.pagemainmenu);
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
		getSupportActionBar().setTitle("" + page.getName());
		if (page.getDateMillis() != 0) {
			getSupportActionBar().setSubtitle("" + Helpers.millisDateToString(page.getDateMillis(), 2));
		}
		//===============================================================================================================
		StaggeredGridLayoutManager lmpagemain = new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL);
		rvpagemain.setLayoutManager(lmpagemain);
		rvpagemain.setAdapter(new PageActivityAdapter(getApplicationContext(), contents, this, this));

		fabPageMain1 = (FloatingActionButton) findViewById(R.id.fabPageMain1);
		isMainfabOpen = false;
		fabTextChild = ((FloatingActionButton) findViewById(R.id.fabTextChild));
		fabImageChild = ((FloatingActionButton) findViewById(R.id.fabImageChild));
		//fabDriveChild = ((FloatingActionButton) findViewById(R.id.fabDriveChild)); UNUSED FOR NOW

		/**bottom_drawer = (LinearLayout) findViewById(R.id.bottom_drawer);
		 bottomSheetBehavior = BottomSheetBehavior.from(bottom_drawer);
		 bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);*/

		//===============================================================================================================
		fabPageMain1.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				if (!isMainfabOpen) {

					fabTextChild.show();
					fabImageChild.show();
					//fabDriveChild.show();
					isMainfabOpen = true;
					ObjectAnimator openFirstSubfab = ObjectAnimator.ofFloat(fabTextChild, View.TRANSLATION_Y, 200, 0);
					openFirstSubfab.start();
					ObjectAnimator openSecondSubfab = ObjectAnimator.ofFloat(fabImageChild, View.TRANSLATION_Y, 400, 0);
					openSecondSubfab.start();
					//ObjectAnimator openThirdSubfab = ObjectAnimator.ofFloat(fabDriveChild, View.TRANSLATION_Y, 600, 0);
					//openThirdSubfab.start();
					ObjectAnimator rotateMainfab = ObjectAnimator.ofFloat(fabPageMain1, View.ROTATION, 0, 135);
					rotateMainfab.start();

				} else if (isMainfabOpen) {
					isMainfabOpen = false;
					ObjectAnimator rotateMainfab = ObjectAnimator.ofFloat(fabPageMain1, View.ROTATION, 135, 270);
					rotateMainfab.start();
					ObjectAnimator closeFirstSubfab = ObjectAnimator.ofFloat(fabTextChild, View.TRANSLATION_Y, 0, 200);
					closeFirstSubfab.start();
					ObjectAnimator closeSecondSubfab = ObjectAnimator.ofFloat(fabImageChild, View.TRANSLATION_Y, 0, 400);
					closeSecondSubfab.start();
					//ObjectAnimator closeThirdSubfab = ObjectAnimator.ofFloat(fabDriveChild, View.TRANSLATION_Y, 0, 600);
					//closeThirdSubfab.start();
					fabTextChild.hide();
					fabImageChild.hide();
					//fabDriveChild.hide();
				}
			}


		});
		fabTextChild.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				//On clicking fab
				FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
				Fragment prev = getSupportFragmentManager().findFragmentByTag("dialog");
				if (prev != null) {
					ft.remove(prev);
				}
				ft.addToBackStack(null);
				// Create and show the dialog.
				NewPageChildFragment newFragment = NewPageChildFragment.newInstance('t', page);
				newFragment.show(ft, "dialog");
			}
		});
		fabImageChild.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				//bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);
				ModalBottomSheet modalBottomSheet = new ModalBottomSheet();
				modalBottomSheet.show(getSupportFragmentManager(), "bottom sheet");
			}
		});
		//===============================================================================================================
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.pagemainmenu, menu);
		return true;
	}

	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		if (page.isFavorite()) {
			menu.findItem(R.id.mPageFav).setIcon(AppCompatResources.getDrawable(getApplicationContext(), R.drawable.ic_star_white_24dp));
		} else {
			menu.findItem(R.id.mPageFav).setIcon(AppCompatResources.getDrawable(getApplicationContext(), R.drawable.ic_star_border_white_24dp));
		}
		return super.onPrepareOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
			case R.id.mPageFav:
				if (page.isFavorite()) {
					page.setIsFavorite(false);
				} else {
					page.setIsFavorite(true);
				}
				invalidateOptionsMenu();
				Helpers.addPageFromUID16(page.getParentUID(), page, getApplicationContext());
				break;
			case android.R.id.home:
				/**Intent intent = new Intent(this, NotebookMainActivity.class);
				 intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
				 intent.putExtra("notebookUID16", notebookUID16);
				 intent.putExtra("parent", "PageActivityMain");
				 startActivity(intent);*/
				finish();
				return true;

		}
		return true;
	}

	@Override
	public void returnTextChildInfo(String title, String text) {
		Log.d("PageActivityMain", "returnTextChildInfo called.");
		ChildBase newChild = new ChildBase(title, text, page.getParentUID(), page.getUID());
		page.addToPage(newChild);
		Helpers.addPageFromUID16(page.getParentUID(), page, getApplicationContext());
		//((PageActivityAdapter) rvpagemain.getAdapter()).refreshList(newChild);
		rvpagemain.getAdapter().notifyDataSetChanged();
	}

	@Override
	public void returnDecision(String tag, final String title) {
		final String newImageName = "i" + Helpers.generateUniqueId(16);
		if (tag.equals("camera")) {
			locationpermission();
			if (SharedPrefs.getBoolean(getApplicationContext(), "deleteNoticeShown")) {
				if (allowCamera) {
					Intent takePicture = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
					if (takePicture.resolveActivity(getPackageManager()) != null) {
						File nomedia = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), ".nomedia");
						if (!nomedia.exists()) {
							try {
								nomedia.createNewFile();
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						File photo = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), newImageName + ".png");
						Uri photoURI = Uri.fromFile(photo);
						takePicture.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
						try {
							startActivityForResult(takePicture, 1);
						} catch (SecurityException e) {
							e.printStackTrace();
							ActivityCompat.requestPermissions((Activity) getApplicationContext(),
									new String[]{Manifest.permission.ACCESS_COARSE_LOCATION},
									MY_PERMISSIONS_REQUEST_CAMERA);

						}
						ChildBase newImage = new ChildBase("" + title, newImageName, page.getParentUID(), page.getUID(), photoURI, getApplicationContext());
						page.addToPage(newImage);
						Helpers.addPageFromUID16(page.getParentUID(), page, getApplicationContext());
						rvpagemain.invalidate();
					}
				}
			} else {
				new AlertDialog.Builder(this)
						.setTitle("Notice")
						.setMessage("Some phones will automatically copy every picture taken here to the gallery. Feel free to delete those copies from your gallery. The photos in this app won't be affected")
						.setPositiveButton("I understand", new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int which) {
								if (allowCamera) {
									Intent takePicture = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
									if (takePicture.resolveActivity(getPackageManager()) != null) {
										File nomedia = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), ".nomedia");
										if (!nomedia.exists()) {
											try {
												nomedia.createNewFile();
											} catch (IOException e) {
												e.printStackTrace();
											}
										}
										File photo = new File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), newImageName + ".png");
										Uri photoURI = Uri.fromFile(photo);
										takePicture.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
										try {
											startActivityForResult(takePicture, 1);
										} catch (SecurityException e) {
											e.printStackTrace();
											ActivityCompat.requestPermissions((Activity) getApplicationContext(),
													new String[]{Manifest.permission.ACCESS_COARSE_LOCATION},
													MY_PERMISSIONS_REQUEST_CAMERA);

										}
										ChildBase newImage = new ChildBase("" + title, newImageName, page.getParentUID(), page.getUID(), photoURI, getApplicationContext());
										page.addToPage(newImage);
										Helpers.addPageFromUID16(page.getParentUID(), page, getApplicationContext());
										rvpagemain.invalidate();
										SharedPrefs.setBoolean(getApplicationContext(), "deleteNoticeShown", true);
									}
								}
							}
						})
						.show();
			}


		} else if (tag.equals("gallery")) {
			Intent intent = new Intent();
			intent.setType("image/*");
			intent.setAction(Intent.ACTION_GET_CONTENT);
			startActivityForResult(Intent.createChooser(intent,
					"Select Picture"), 1);
		}
	}
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == RESULT_OK) {
			if (requestCode == 1) {
				Uri selectedImageUri = data.getData();

			}
		}
	}

	private static final int MY_PERMISSIONS_REQUEST_CAMERA = 0;

	private void locationpermission() {
		// Here, thisActivity is the current activity
		if (ContextCompat.checkSelfPermission(this
				,
				Manifest.permission.CAMERA)
				!= PackageManager.PERMISSION_GRANTED) {

			// Should we show an explanation?
			if (ActivityCompat.shouldShowRequestPermissionRationale(this,
					Manifest.permission.CAMERA)) {

				// Show an expanation to the user *asynchronously* -- don't block
				// this thread waiting for the user's response! After the user
				// sees the explanation, try again to request the permission.

			} else {

				// No explanation needed, we can request the permission.

				ActivityCompat.requestPermissions(this,
						new String[]{Manifest.permission.CAMERA},
						MY_PERMISSIONS_REQUEST_CAMERA);

				// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an
				// app-defined int constant. The callback method gets the
				// result of the request.
			}
		}
	}

	@Override
	public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
		switch (requestCode) {
			case MY_PERMISSIONS_REQUEST_CAMERA:
				// permission was granted, yay! Do the
// contacts-related task you need to do.
// permission denied, boo! Disable the
// functionality that depends on this permission.
				allowCamera = grantResults.length > 0
						&& grantResults[0] == PackageManager.PERMISSION_GRANTED;
				return;
		}
	}

	@Override
	public void clickListener(String uid) {
		ChildBase child = null;
		for (ChildBase a : contents) {
			if (a.getUID16().equals(uid)) {
				child = a;
				break;
			}
		}
		if (child != null) {
			Intent intent = new Intent(this, ImageZoomActivity.class);
			intent.putExtra("imagechild", Parcels.wrap(child));
			startActivity(intent);
		}
	}


}
%%ModalBottomSheet.java
package com.twotowerstudios.virtualnotebookdesign.PageActivityMain;


import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.BottomSheetDialogFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;

import com.twotowerstudios.virtualnotebookdesign.R;

public class ModalBottomSheet extends BottomSheetDialogFragment {
	LinearLayout bottomGalleryButton, bottomCameraButton;
	OnModalBottomSheetListener mListener;
	EditText etImageTitle;
	public interface OnModalBottomSheetListener{
		void returnDecision(String tag, String title);
	}
	public ModalBottomSheet() {
		// Required empty public constructor
	}

	BottomSheetDialogFragment newinstance(){return new BottomSheetDialogFragment();}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
							 Bundle savedInstanceState) {
		// Inflate the layout for this fragment
		return inflater.inflate(R.layout.fragment_modal_bottom_sheet, container, false);
	}

	@Override
	public void onAttach(Context context) {
		super.onAttach(context);
		if(context instanceof OnModalBottomSheetListener){
			mListener = (OnModalBottomSheetListener) context;
		}else{
			throw new RuntimeException(context.toString()
					+ " must implement OnModalBottomSheetListener");
		}
	}

	@Override
	public void onDetach() {
		super.onDetach();
		mListener = null;
	}

	@Override
	public void onViewCreated(View v, @Nullable Bundle savedInstanceState) {
		bottomCameraButton = (LinearLayout) v.findViewById(R.id.bottomCameraButton);
		bottomGalleryButton = (LinearLayout) v.findViewById(R.id.bottomGalleryButton);
		etImageTitle=(EditText)v.findViewById(R.id.etImageTitle);

		bottomCameraButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				mListener.returnDecision("camera",etImageTitle.getText().toString());
				dismiss();
			}
		});
		bottomGalleryButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				mListener.returnDecision("gallery",etImageTitle.getText().toString());
				dismiss();
			}
		});
	}
}
%%NewPageChildFragment.java
package com.twotowerstudios.virtualnotebookdesign.PageActivityMain;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.DialogFragment;
import android.support.v7.widget.Toolbar;
import android.text.method.ScrollingMovementMethod;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.EditText;

import com.twotowerstudios.virtualnotebookdesign.Objects.Page;
import com.twotowerstudios.virtualnotebookdesign.R;

import org.parceler.Parcels;


public class NewPageChildFragment extends DialogFragment {

    private OnFragmentInteractionListener mListener;

    char type;
    Page page;

    public NewPageChildFragment() {
        // Required empty public constructor
    }

    public static NewPageChildFragment newInstance(char type, Page page) {
        NewPageChildFragment fragment = new NewPageChildFragment();
        Bundle args = new Bundle();
        args.putChar("type", type);
        args.putParcelable("page", Parcels.wrap(page));
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            type = getArguments().getChar("type");
            page = Parcels.unwrap(getArguments().getParcelable("page"));
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        if(type == 't'){
            return inflater.inflate(R.layout.fragment_new_page_child_text, container, false);
        }/*else if(type == 'i'){
            return inflater.inflate(R.layout.fragment_new_page_child_image, container, false);
        }else if(type == 'd'){
            return inflater.inflate(R.layout.fragment_new_page_child_drive, container, false);
        }*/else{return inflater.inflate(R.layout.fragment_new_page_child_text, container, false);}
    }

    @Override
    public void onViewCreated(View v, @Nullable Bundle savedInstanceState) {
        if (type=='t') {
            Toolbar tbNewpagechild = (Toolbar) v.findViewById(R.id.tbNewpagechild);
			final EditText etTitlePageChild = (EditText) v.findViewById(R.id.etTitlePageChild);
			final EditText etBodyPageChild = (EditText) v.findViewById(R.id.etBodyPageChild);
			etTitlePageChild.setMovementMethod(new ScrollingMovementMethod());
			tbNewpagechild.inflateMenu(R.menu.newpage);
            tbNewpagechild.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {
                @Override
                public boolean onMenuItemClick(MenuItem item) {
                    switch (item.getItemId()) {
                        case R.id.action_newpage:
							mListener.returnTextChildInfo(etTitlePageChild.getText().toString(), etBodyPageChild.getText().toString());
							dismiss();
                            break;
                    }return false;
                }
            });
        }else{

        }
    }

	@Override
	public void onResume() {
		super.onResume();
		DisplayMetrics displaymetrics = new DisplayMetrics();
		getActivity().getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
		int height = displaymetrics.heightPixels;
		int width = displaymetrics.widthPixels;
		WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
		lp.copyFrom(getDialog().getWindow().getAttributes());
		lp.width = (int)(width*0.9);
		lp.height = WindowManager.LayoutParams.WRAP_CONTENT;

		getDialog().getWindow().setAttributes(lp);
	}

	@Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }
    public interface OnFragmentInteractionListener {
        void returnTextChildInfo(String title, String  text);
    }
}
%%PageActivityAdapter
package com.twotowerstudios.virtualnotebookdesign.PageActivityMain;

import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.twotowerstudios.virtualnotebookdesign.Misc.Helpers;
import com.twotowerstudios.virtualnotebookdesign.Misc.SharedPrefs;
import com.twotowerstudios.virtualnotebookdesign.Objects.ChildBase;
import com.twotowerstudios.virtualnotebookdesign.Objects.Page;
import com.twotowerstudios.virtualnotebookdesign.R;

import java.io.File;
import java.util.ArrayList;


public class PageActivityAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

	private Context context;
	private ArrayList<ChildBase> list;
	private PageAdapterToAct interf;
	private Activity mActivity = null;
	private int pos;

	private final int TEXT = 0, IMAGE = 1, DRIVE = 2;

	public interface PageAdapterToAct {
		void clickListener(String uid);
	}

	public class ViewHolderText extends RecyclerView.ViewHolder {
		private TextView tvChild;
		private TextView tvChildTextTitle;

		public ViewHolderText(View v) {
			super(v);
			tvChild = (TextView) v.findViewById(R.id.tvChild);
			tvChildTextTitle = (TextView) v.findViewById(R.id.tvChildTextTitle);
		}
	}

	public class ViewHolderImage extends RecyclerView.ViewHolder {
		private ImageView ivChildImage;
		private TextView tvChildImage;

		public ViewHolderImage(View v) {
			super(v);
			ivChildImage = (ImageView) v.findViewById(R.id.ivChildImage);
			tvChildImage = (TextView) v.findViewById(R.id.tvChildImage);

		}
	}

	public class ViewHolderDrive extends RecyclerView.ViewHolder {
		private ImageView ivChildDrive;
		private TextView tvChildDrive;

		public ViewHolderDrive(View v) {
			super(v);
			ivChildDrive = (ImageView) v.findViewById(R.id.ivChildDrive);
			tvChildDrive = (TextView) v.findViewById(R.id.tvChildDrive);
		}
	}

	/**
	 * @Override public int getItemViewType(int position) {
	 * if(((ChildBase)list.get(position)).getUID16().charAt(0)=='t'){
	 * return TEXT;
	 * }else if(((ChildBase)list.get(position)).getUID16().charAt(0)=='c'){
	 * return IMAGE;
	 * }else if(((ChildBase)list.get(position)).getUID16().charAt(0)=='d'){
	 * return DRIVE;
	 * }
	 * return -1;
	 * }
	 */
	@Override
	public int getItemViewType(int position) {
		if (list.get(position).getChildType() == 0) {
			return TEXT;
		} else if (list.get(position).getChildType() == 1) {
			return IMAGE;
		} else if (list.get(position).getChildType() == 2) {
			return DRIVE;
		}
		return -1;
	}

	public PageActivityAdapter(Context context, ArrayList<ChildBase> list, PageAdapterToAct interf, Activity activity) {
		this.context = context;
		this.list = list;
		this.interf = interf;
		mActivity = activity;
	}

	@Override
	public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
		RecyclerView.ViewHolder viewHolder;
		LayoutInflater inflater = LayoutInflater.from(parent.getContext());

		switch (viewType) {
			case 0:
				View v1 = inflater.inflate(R.layout.pchild_text, parent, false);
				viewHolder = new ViewHolderText(v1);
				break;
			case 1:
				View v2 = inflater.inflate(R.layout.pchild_image, parent, false);
				viewHolder = new ViewHolderImage(v2);
				break;
			case 3:
				View v3 = inflater.inflate(R.layout.pchild_drive, parent, false);
				viewHolder = new ViewHolderImage(v3);
				break;
			default:
				View v4 = inflater.inflate(R.layout.pchild_text, parent, false);
				viewHolder = new ViewHolderImage(v4);
				break;
		}
		return viewHolder;
	}

	@Override
	public void onBindViewHolder(RecyclerView.ViewHolder Vholder, int position) {
		Log.d("PageActivityAdapter", "onBindViewHolder: start");
		pos = position;
		switch (Vholder.getItemViewType()) {
			case TEXT:
				Log.d("PageActivityAdapter", "onBindViewHolder: TEXT Itemviewtype");
				ViewHolderText holder = (ViewHolderText) Vholder;
				ChildBase child = list.get(position);
				holder.tvChild.setText("" + child.getText());
				if (child.getTitle() == null || child.getTitle().equals("")) {        //if theres no title, make Title disappear
					holder.tvChildTextTitle.setVisibility(View.GONE);
				} else { //make title appear
					holder.tvChildTextTitle.setVisibility(View.VISIBLE);
					holder.tvChildTextTitle.setText(child.getTitle());
				}
				//configureViewHolderText(vhText, position);
				break;

			//===============================================================================================================
			case IMAGE:
				final ViewHolderImage holderImage = (ViewHolderImage) Vholder;
				final ChildBase childImage = list.get(position);
				final String imageUID = childImage.getUID16();
				if (!childImage.getTitle().equals("") || childImage.getTitle() == null) {
					holderImage.tvChildImage.setText("" + childImage.getTitle());
				} else {
					holderImage.tvChildImage.setVisibility(View.GONE);
				}

				Glide.with(context)
						//.load(childImage.getUri())
						.load(childImage.getUri().toString())
						.centerCrop()
						.error(R.drawable.ic_broken_image_red_24dp)
						.placeholder(R.drawable.ic_image_black_24dp)
						.into(holderImage.ivChildImage);

				File newFile = new File(childImage.getUri().getPath());
				//File fileuri = new File(childImage.getUri().getPath());

				/**try {
				 holderImage.ivChildImage.setImageBitmap(MediaStore.Images.Media.getBitmap(context.getContentResolver(), childImage.getUri()));
				 } catch (IOException e) {
				 e.printStackTrace();
				 }*/
				Log.d("PageActivityAdapter", "onBindViewHolder: uri exists: " + childImage.getUri().toString());
				Log.d("PageActivityAdapter", "onBindViewHolder: uri path: " + childImage.getUri().getPath());
				holderImage.ivChildImage.setOnClickListener(new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						interf.clickListener(imageUID);
					}
				});

				holderImage.ivChildImage.setOnLongClickListener(new View.OnLongClickListener() {
					@Override
					public boolean onLongClick(View v) {
						View checkBoxView = null;
						checkBoxView = View.inflate(context, R.layout.checkbox, null);
						CheckBox checkBox = (CheckBox) checkBoxView.findViewById(R.id.mcheckBox);
						checkBox.setChecked(true);
						SharedPrefs.setBoolean(context, "deleteFileCheck", true);
						checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
							@Override
							public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
								SharedPrefs.setBoolean(context, "deleteFileCheck", isChecked);
							}
						});

						new AlertDialog.Builder(mActivity)
								.setTitle("Do you want to delete this image?")
								.setPositiveButton("Delete", new DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog, int which) {
										list.remove(pos);
										Page newpage = Helpers.getPageFromUID(childImage.getPageUID(), childImage.getNotebookUID(), context);
										newpage.removeFromPage(pos);
										Helpers.addPageFromUID16(newpage.getParentUID(), newpage, context);
										if (SharedPrefs.getBoolean(context, "deleteFileCheck")) {
											File fdelete = new File(childImage.getUri().getPath());
											if (fdelete.exists()) {
												if (fdelete.delete()) {
													Toast.makeText(context, "file deleted :" + childImage.getUri().getPath(), Toast.LENGTH_SHORT).show();
												} else {
													Toast.makeText(context, "file not deleted :" + childImage.getUri().getPath(), Toast.LENGTH_SHORT).show();

												}
											}
										}
										notifyItemRemoved(pos);
									}
								})
								.setView(checkBoxView)

								.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog, int which) {

									}
								}).show();

						return false;
					}
				});
				break;
			case DRIVE:
				ViewHolderDrive vhDrive = (ViewHolderDrive) Vholder;
				configureViewHolderDrive(vhDrive, position);
				break;
		}
		Log.d("PageActivityAdapter", "Vholder.getitemviewtype = " + Vholder.getItemViewType());
	}

	/**
	 * private void configureViewHolderText(ViewHolderText holder, int position){
	 * ChildText child = (ChildText) list.get(position);
	 * holder.tvChild.setText(""+child.getText());
	 * if(child.getTitle()==null){		//if theres no title, make Title disappear
	 * holder.tvChildTextTitle.setVisibility(View.GONE);
	 * }else{ //make title appear
	 * holder.tvChildTextTitle.setVisibility(View.VISIBLE);
	 * holder.tvChildTextTitle.setText(child.getTitle());
	 * }
	 * }
	 */
	//private void configureViewHolderImage(ViewHolderImage holder, int position){
	private void configureViewHolderDrive(ViewHolderDrive holder, int position) {
		ChildBase child = list.get(position);
		holder.tvChildDrive.setText("" + child.getTitle());
		switch (child.getType()) {
			case 0:
				Glide.with(context)
						.load(R.drawable.drivedocs)
						.into(holder.ivChildDrive);
				break;
			case 1:
				Glide.with(context)
						.load(R.drawable.drivesheets)
						.into(holder.ivChildDrive);
				break;
			case 2:
				Glide.with(context)
						.load(R.drawable.driveslides)
						.into(holder.ivChildDrive);
				break;
			default:
				Glide.with(context)
						.load(R.drawable.drivedefault)
						.into(holder.ivChildDrive);
				break;
		}
	}

	@Override
	public int getItemCount() {
		return list.size();
	}

	public void refreshList(ChildBase newChild) {
		list.add(newChild);
		notifyDataSetChanged();
		Log.d("PageActivityAdapter", "refreshList: called. list.size() == " + list.size());

	}
}
%%activity_main.xml
<?xml version="1.0" encoding="utf-8"?>

<android.support.design.widget.CoordinatorLayout android:id="@+id/clMainActivity"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_height="match_parent"
    android:layout_width="match_parent"
    >

	<RelativeLayout
		android:id="@+id/activity_main"
		android:layout_width="match_parent"
		android:layout_height="match_parent">

		<android.support.v7.widget.Toolbar
			android:id="@+id/toolbar"
			android:layout_width="match_parent"
			android:layout_height="?attr/actionBarSize"
			android:background="?attr/colorPrimary"
			android:elevation="4dp" />

		<!--<android.support.v7.widget.RecyclerView
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:id="@+id/rvMainMenu">

		</android.support.v7.widget.RecyclerView>-->
		<android.support.design.widget.FloatingActionButton
			android:id="@+id/fabMain"
			android:layout_width="56dp"
			android:layout_height="56dp"
			android:src="@mipmap/plus"
			android:layout_marginRight="@dimen/fab_margin_right"
			android:layout_marginEnd="@dimen/fab_margin_right"
			android:layout_marginBottom="@dimen/fab_margin_bottom"
			android:layout_alignParentBottom="true"
			android:layout_alignParentRight="true"
			android:layout_alignParentEnd="true"
			app:fabSize="normal" />

		<android.support.design.widget.FloatingActionButton
			android:id="@+id/fabShoot"
			android:layout_width="56dp"
			android:layout_height="56dp"
			app:fabSize="mini"
			android:layout_marginLeft="8dp"
			app:srcCompat="@drawable/ic_add_a_photo_white_24px"
			android:tint="@android:color/white"
			app:backgroundTint="@color/colorPrimary"
			android:layout_marginBottom="20dp"
			android:layout_above="@+id/fabMain"
			android:layout_alignLeft="@+id/fabMain"
			android:layout_alignStart="@+id/fabMain"
			android:translationY="60dp"
			android:visibility="gone"/>
		<android.support.design.widget.FloatingActionButton
			android:id="@+id/fabImage"
			android:layout_width="56dp"
			android:layout_height="56dp"
			app:fabSize="mini"
			android:layout_marginLeft="8dp"
			app:srcCompat="@drawable/ic_image_white_24px"
			android:tint="@android:color/white"
			app:backgroundTint="@color/colorPrimary"
			android:layout_marginBottom="20dp"
			android:layout_above="@+id/fabShoot"
			android:layout_alignLeft="@+id/fabMain"
			android:layout_alignStart="@+id/fabMain"
			android:translationY="60dp"
			android:visibility="gone"/>
		<android.support.design.widget.FloatingActionButton
			android:id="@+id/fabPage"
			android:layout_width="56dp"
			android:layout_height="56dp"
			app:fabSize="mini"
			android:layout_marginLeft="8dp"
			app:srcCompat="@drawable/ic_note_add_white_24px"
			android:tint="@android:color/white"
			app:backgroundTint="@color/colorPrimary"
			android:layout_marginBottom="20dp"
			android:layout_above="@+id/fabImage"
			android:layout_alignLeft="@+id/fabMain"
			android:layout_alignStart="@+id/fabMain"
			android:translationY="60dp"
			android:visibility="gone"/>

		<!--<android.support.v7.widget.CardView
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:layout_gravity="center"
			android:id="@+id/cvCommonBooksCard"
			android:elevation="8dp"
			app:cardCornerRadius="4dp"
			app:cardUseCompatPadding="true"
			android:layout_marginTop="40dp"
			android:layout_below="@+id/toolbar"
			android:layout_alignParentRight="true"
			android:layout_alignParentEnd="true"
			android:layout_marginBottom="40dp">-->
		<LinearLayout
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:layout_below="@+id/toolbar">
			<RelativeLayout
				android:layout_width="match_parent"
				android:layout_height="wrap_content"
				android:paddingBottom="16dp">

				<RelativeLayout
					android:layout_width="match_parent"
					android:layout_height="56dp"
					android:background="@color/colorPrimaryLight"
					android:id="@+id/coloredHeader">

					<TextView
						android:layout_width="wrap_content"
						android:layout_height="wrap_content"
						android:layout_marginTop="12dp"
						android:layout_marginLeft="16dp"
						android:text="Welcome back!"
						android:textSize="28sp"/>

				</RelativeLayout>

				<TextView
					android:text="Here are your favorite notebooks: "
					android:layout_width="wrap_content"
					android:layout_height="wrap_content"
					android:id="@+id/textView3"
					android:layout_below="@+id/coloredHeader"
					android:layout_marginLeft="16dp"
					android:layout_marginTop="8dp" />
				<android.support.v7.widget.RecyclerView
					android:layout_width="match_parent"
					android:layout_height="wrap_content"
					android:id="@+id/rvCommonBooks"
					android:layout_below="@+id/textView3"
					android:orientation="horizontal"
					android:layout_marginTop="8dp">

				</android.support.v7.widget.RecyclerView>
				<!--<ImageView
					android:layout_width="60dp"
					android:layout_height="60dp"
					android:src="@drawable/ic_book_black_36px"
					android:layout_below="@+id/textView3"
					android:layout_marginLeft="16dp"
					android:layout_marginStart="16dp"
					android:id="@+id/imageView"
					android:elevation="4dp"
					android:background="@drawable/image_border1"
					android:layout_marginTop="8dp"
					android:layout_marginBottom="16dp"/>-->

			</RelativeLayout>
		</LinearLayout><!--</android.support.v7.widget.CardView>-->

	</RelativeLayout>
</android.support.design.widget.CoordinatorLayout>
%%activity_notebook_main.xml
<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout
	xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.twotowerstudios.virtualnotebookdesign.NotebookMain.NotebookMainActivity">

	<android.support.design.widget.AppBarLayout
		android:id="@+id/appbarlayoutNotebook"
		android:layout_width="match_parent"
		android:layout_height="180dp"
		android:fitsSystemWindows="true"

		>

		<android.support.design.widget.CollapsingToolbarLayout
			android:id="@+id/collapseToolbarNotebook"
			android:layout_width="match_parent"
			android:layout_height="match_parent"
			app:layout_scrollFlags="scroll|exitUntilCollapsed"
			android:fitsSystemWindows="true"
			app:expandedTitleMarginStart="48dp"
			app:expandedTitleMarginEnd="40dp"
			app:expandedTitleMarginBottom="60dp"

			>
			<TextView
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				android:layout_marginLeft="48dp"
				android:id="@+id/tvSub"
				android:layout_marginRight="64dp"
				android:text="Last modified: 5 hours ago"
				android:layout_gravity="bottom"
				android:layout_marginBottom="20dp"/>
			<android.support.v7.widget.Toolbar
				android:id="@+id/toolbarNotebook"
				android:layout_height="?android:attr/actionBarSize"
				android:layout_width="match_parent"
				android:title="Title"
				android:subtitle="Subtitle"
				app:layout_collapseMode="pin"
				/>
		</android.support.design.widget.CollapsingToolbarLayout>

	</android.support.design.widget.AppBarLayout>


	<LinearLayout
		android:orientation="vertical"
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		app:layout_behavior="@string/appbar_scrolling_view_behavior">

		<RelativeLayout
			android:layout_width="match_parent"
			android:layout_height="match_parent"

			android:background="#bbbbbb"
			android:id="@+id/emptyNotebook">

			<ImageView
				app:srcCompat="@drawable/ic_note_add_white_24px"
				android:id="@+id/imageView"
				android:layout_width="88dp"
				android:layout_height="88dp"
				android:layout_marginTop="91dp"
				android:layout_alignParentTop="true"
				android:layout_centerHorizontal="true"/>

			<TextView
				android:text="There's nothing here. \nDo you want to add a new page?"
				android:layout_height="wrap_content"
				android:id="@+id/textView4"
				android:layout_marginTop="23dp"
				android:layout_width="200dp"
				android:layout_below="@+id/imageView"
				android:layout_centerHorizontal="true"
				android:textAppearance="@style/TextAppearance.AppCompat.Title"
				android:textAlignment="center"
				android:textSize="20sp"
				android:textColor="#333333"/>

		</RelativeLayout>

		<LinearLayout
			android:layout_width="match_parent"
			android:layout_height="match_parent"
			android:orientation="vertical"
			android:visibility="gone"
			android:id="@+id/notEmptyNotebook">

			<android.support.design.widget.TabLayout
				android:id="@+id/sliding_tabs"
				android:layout_width="match_parent"
				android:layout_height="wrap_content"
				app:tabMode="fixed" />

			<android.support.v4.view.ViewPager
				android:id="@+id/viewpager"
				android:layout_width="match_parent"
				android:layout_height="0px"
				style="@style/MyCustomTabLayout"
				android:layout_weight="1"/>

		</LinearLayout>
	</LinearLayout>

	<android.support.design.widget.FloatingActionButton
		android:id="@+id/fabnotebookmain"
		android:layout_width="56dp"
		android:layout_height="56dp"
		app:fabSize="normal"
		app:srcCompat="@drawable/ic_note_add_white_24px"
		android:tint="@android:color/white"
		app:backgroundTint="@color/colorPrimary"
		android:visibility="visible"
		android:layout_margin="16dp"

		app:layout_anchor="@id/appbarlayoutNotebook"
		app:layout_anchorGravity="bottom|right|end"
		/>
</android.support.design.widget.CoordinatorLayout>
%%activity_notebook_selection.xml
<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout
	xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:tools="http://schemas.android.com/tools"
	xmlns:app="http://schemas.android.com/apk/res-auto"
	android:id="@+id/activity_notebook_selection"
	android:layout_width="match_parent"

	android:layout_height="match_parent"
	tools:context="com.twotowerstudios.virtualnotebookdesign.NotebookSelection.NotebookSelection">

    <RelativeLayout
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		android:id="@+id/relativeLayout">

        <android.support.v7.widget.Toolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary"
			app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
			app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
            android:elevation="4dp" />



		<android.support.v7.widget.RecyclerView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_below="@+id/toolbar"

            android:id="@+id/rvnotebookselection"
			tools:listitem="@layout/notebookselectioncard">

        </android.support.v7.widget.RecyclerView>

    </RelativeLayout>

	<android.support.design.widget.FloatingActionButton
		android:id="@+id/fabSelection"
		android:layout_width="56dp"
		android:layout_height="56dp"
		android:src="@mipmap/plus"
		android:elevation="8dp"
		android:layout_marginRight="@dimen/fab_margin_right"
		android:layout_marginEnd="@dimen/fab_margin_right"
		android:layout_marginBottom="@dimen/fab_margin_bottom"
		android:layout_alignParentBottom="true"
		android:layout_alignParentRight="true"
		android:layout_alignParentEnd="true"
		app:fabSize="normal"
		app:layout_behavior="com.twotowerstudios.virtualnotebookdesign.NotebookSelection.ScrollAwareFABBehavior"
		app:layout_anchor="@id/rvnotebookselection"
		app:layout_anchorGravity="bottom|right"/>

	<android.support.design.widget.FloatingActionButton
		android:id="@+id/fabAddBlock"
		android:layout_width="56dp"
		android:layout_height="56dp"
		app:fabSize="normal"
		android:elevation="8dp"
		app:layout_behavior="com.twotowerstudios.virtualnotebookdesign.NotebookSelection.ScrollAwareFABBehavior"
		android:layout_marginRight="@dimen/fab_margin_right"
		android:layout_marginEnd="@dimen/fab_margin_right"
		android:layout_marginBottom="@dimen/fab_margin_bottom_2nd"
		app:srcCompat="@drawable/ic_note_add_white_24px"
		android:tint="@android:color/white"
		app:backgroundTint="@color/colorPrimary"
		android:translationY="60dp"
		android:visibility="gone"
		app:layout_anchor="@id/rvnotebookselection"
		app:layout_anchorGravity="bottom|right"/>
</android.support.design.widget.CoordinatorLayout>
%%activity_page_main.xml
<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout
	xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:tools="http://schemas.android.com/tools"
	android:id="@+id/activity_page_main"
	android:layout_width="match_parent"
	xmlns:app="http://schemas.android.com/apk/res-auto"
	android:layout_height="match_parent"
	tools:context="com.twotowerstudios.virtualnotebookdesign.PageActivityMain.PageActivityMain">


	<RelativeLayout
		android:layout_width="match_parent"

		android:layout_height="match_parent">
		<android.support.design.widget.FloatingActionButton
			android:layout_width="56dp"
			android:layout_height="56dp"
			app:fabSize="normal"
			android:src="@mipmap/plus"
			app:elevation="8dp"
			android:layout_marginRight="@dimen/fab_margin_right"
			android:layout_marginEnd="@dimen/fab_margin_right"
			android:layout_marginBottom="@dimen/fab_margin_bottom"
			android:id="@+id/fabPageMain1"
			android:layout_alignParentRight="true"
			android:layout_alignParentBottom="true"
			android:layout_alignParentEnd="true"/>
		<android.support.design.widget.FloatingActionButton
			android:id="@+id/fabTextChild"
			android:layout_width="56dp"
			android:layout_height="56dp"
			app:fabSize="mini"
			android:layout_marginLeft="8dp"
			app:srcCompat="@drawable/ic_format_size_black_24dp"
			android:tint="@android:color/white"
			app:backgroundTint="@color/colorPrimary"
			android:layout_marginBottom="20dp"
			android:layout_above="@+id/fabPageMain1"
			android:layout_alignLeft="@+id/fabPageMain1"
			android:layout_alignStart="@+id/fabPageMain1"
			android:translationY="60dp"
			android:visibility="gone" />
		<android.support.design.widget.FloatingActionButton
			android:id="@+id/fabImageChild"
			android:layout_width="56dp"
			android:layout_height="56dp"
			app:fabSize="mini"
			android:layout_marginLeft="8dp"
			app:srcCompat="@drawable/ic_image_white_24px"
			android:tint="@android:color/white"
			app:backgroundTint="@color/colorPrimary"
			android:layout_marginBottom="20dp"
			android:layout_above="@+id/fabTextChild"
			android:layout_alignLeft="@+id/fabPageMain1"
			android:layout_alignStart="@+id/fabPageMain1"
			android:translationY="60dp"
			android:visibility="gone" />
		<android.support.design.widget.FloatingActionButton
			android:id="@+id/fabDriveChild"
			android:layout_width="56dp"
			android:layout_height="56dp"
			app:fabSize="mini"
			android:layout_marginLeft="8dp"
			app:srcCompat="@drawable/monochrome128"
			android:tint="@android:color/white"
			app:backgroundTint="@color/colorPrimary"
			android:layout_marginBottom="20dp"
			android:layout_above="@+id/fabImageChild"
			android:layout_alignLeft="@+id/fabPageMain1"
			android:layout_alignStart="@+id/fabPageMain1"
			android:translationY="60dp"
			android:visibility="gone" />
		<LinearLayout
			android:layout_width="match_parent"
			android:layout_height="match_parent"
			android:orientation="vertical"
			android:id="@+id/llpagemain">
			<android.support.v7.widget.Toolbar
				android:layout_width="match_parent"
				android:layout_height="?attr/actionBarSize"
				android:background="?attr/colorPrimary"
				android:id="@+id/tbpagemain"
				app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
				app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
				android:elevation="4dp" />
				<android.support.v7.widget.RecyclerView
					android:layout_width="match_parent"
					android:layout_height="match_parent"
					android:layout_marginLeft="16dp"

					android:layout_marginRight="16dp"
					android:id="@+id/rvpagemain"/>
			</LinearLayout>

	</RelativeLayout>


</android.support.design.widget.CoordinatorLayout>
%%booklight.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:layout_width="80dp"
	android:layout_height="wrap_content"
	android:background="@drawable/image_border1"
	android:id="@+id/rvBookLight"
	>

	<TextView
		android:layout_width="80dp"
		android:layout_height="20dp"
		android:text="Spanish"
		android:textColor="#333333"
		android:id="@+id/tvName"
		android:layout_below="@+id/ivBookLight"
		android:textAlignment="center"/>

	<ImageView
		android:src="@drawable/ic_book_black_36px"
		android:tint="@color/colorPrimary"
		android:layout_width="60dp"
		android:elevation="4dp"
		android:layout_height="60dp"
		android:id="@+id/ivBookLight"
		android:layout_alignParentTop="true"
		android:layout_centerHorizontal="true"/>
</RelativeLayout>
%%checkbox.xml
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
			 android:layout_width="wrap_content"
			 android:layout_marginLeft="16dp"
			 android:layout_height="wrap_content">

	<CheckBox
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:text="Also delete the file from storage"
		android:textColor="#000"
		android:layout_margin="16dp"
	android:button="@drawable/customcheckbox"
		android:id="@+id/mcheckBox"
		/>
</FrameLayout>
%%colorcircle.xml
<?xml version="1.0" encoding="utf-8"?>

<android.support.percent.PercentFrameLayout
	xmlns:android="http://schemas.android.com/apk/res/android"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	xmlns:app="http://schemas.android.com/apk/res-auto"
	android:layout_margin="2dp">

	<ImageView
		android:id="@+id/ivSwatch"
		app:layout_widthPercent="100%"
		app:layout_aspectRatio="100%"
		/>
</android.support.percent.PercentFrameLayout>
%%commonbookscard.xml
<?xml version="1.0" encoding="utf-8"?>
<android.support.v7.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:card_view="http://schemas.android.com/apk/res-auto"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	android:layout_gravity="center"
	android:id="@+id/cvCommonBooksCard"
	android:elevation="8dp"
	card_view:cardCornerRadius="4dp"
	android:layout_marginBottom="8dp"
	card_view:cardUseCompatPadding="true"
	android:layout_margin="4dp">
	<RelativeLayout
		android:layout_width="match_parent"
		android:layout_height="wrap_content">

		<RelativeLayout
			android:layout_width="match_parent"
			android:layout_height="56dp"
			android:background="@color/colorPrimaryLight"
			android:id="@+id/coloredHeader">

			<TextView
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				android:layout_margin="16dp"
				android:text="Welcome back!"
				android:textSize="24sp"/>

		</RelativeLayout>

		<TextView
			android:text="Here are your favorite notebooks: "
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:id="@+id/textView3"
			android:layout_below="@+id/coloredHeader"
			android:layout_marginLeft="16dp"
			android:layout_marginTop="8dp" />

		<android.support.v7.widget.RecyclerView
			android:layout_width="match_parent"
			android:layout_below="@+id/textView3"
			android:layout_margin="16dp"
			android:layout_height="100dp"
			android:id="@+id/rvCommonBooks" />
	</RelativeLayout>
</android.support.v7.widget.CardView>
%%fragment_delete_notebook.xml
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/edit_name"
    android:layout_width="wrap_content" android:layout_height="wrap_content"
    android:layout_gravity="center" android:orientation="vertical"  >
    <TextView
        android:id="@+id/label" android:text="What book do you want to delete?"
        android:layout_width="wrap_content" android:layout_height="wrap_content" />
    <EditText
        android:id="@+id/idToDelete"
        android:layout_width="match_parent"  android:layout_height="wrap_content"
        android:inputType="text"
        android:imeOptions="actionDone"
        android:hint="87"/>

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Delete"
        android:id="@+id/buttonDelete"
        android:layout_gravity="center"
        />
</LinearLayout>
%%fragment_favorites.xml
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context="com.twotowerstudios.virtualnotebookdesign.NotebookMain.Fragments.FavoritesFragment">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Nothing here...You could favorite some of your notebook's pages."
		android:textAlignment="center"
		android:padding="16dp"
		android:id="@+id/tvFavoritesEmpty"/>
    <android.support.v7.widget.RecyclerView
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:id="@+id/rvFavorites">
    </android.support.v7.widget.RecyclerView>
</LinearLayout>
%%fragment_image_zoom.xml
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
			  xmlns:tools="http://schemas.android.com/tools"
			  android:layout_width="match_parent"
			  android:layout_height="match_parent"
			  tools:context="com.twotowerstudios.virtualnotebookdesign.PageActivityMain.ImageZoomFragment"
			  android:background="#111111"
			  android:orientation="vertical">
	<android.support.v7.widget.Toolbar
		android:layout_width="match_parent"
		android:layout_height="?attr/actionBarSize"
		android:background="@color/md_black_1000"
		android:theme="@style/MaterialTheme.DarkToolbar.ActionBar.DayNight"

		android:id="@+id/tbfullimage"
		android:elevation="4dp" />

	<com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView
		android:layout_height="match_parent"
		android:layout_width="match_parent"
		android:scaleType="centerCrop"
		android:adjustViewBounds="true"
		android:id="@+id/ivFullscreenPage">

	</com.davemorrissey.labs.subscaleview.SubsamplingScaleImageView>

	<View
		android:layout_width="match_parent"
		android:layout_height="1px"
		android:background="#33FF33"/>

</LinearLayout>
%%fragment_new_page.xml
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
			  xmlns:app="http://schemas.android.com/apk/res-auto"
			  xmlns:tools="http://schemas.android.com/tools"
			  android:layout_width="match_parent"
			  android:layout_height="match_parent"
			  android:orientation="vertical"
			  tools:context="com.twotowerstudios.virtualnotebookdesign.NotebookMain.Fragments.NewPage.NewPageFragment">

	<android.support.v7.widget.Toolbar
		android:layout_width="match_parent"
		android:layout_height="?attr/actionBarSize"
		android:background="@color/accent"
		android:id="@+id/tbnewpage"
		android:title="New Page"/>

	<LinearLayout
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:orientation="vertical"
		android:layout_marginLeft="16dp"
		android:layout_marginRight="16dp"
		>
		<!--	android:layout_marginLeft="16dp"
				android:layout_marginRight="16dp" -->
		<LinearLayout
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:orientation="horizontal">
			<ImageView
				app:srcCompat="@drawable/ic_local_offer_black_24dp"
				android:layout_gravity="center"
				android:layout_marginRight="16dp"
				android:layout_width="32dp"
				android:layout_height="32dp"/>

			<android.support.design.widget.TextInputLayout
				android:layout_width="match_parent"
				android:layout_height="wrap_content">
				<EditText
					android:layout_width="match_parent"
					android:layout_height="wrap_content"
					android:inputType="textCapSentences"
					android:id="@+id/teNewpageName"
					android:hint="Page Name"
					android:selectAllOnFocus="false"
					android:layout_weight="1"
					android:maxLines="2"
					android:textSize="28sp"
					android:typeface="sans"
					/>
			</android.support.design.widget.TextInputLayout>
		</LinearLayout>

		<View
			android:layout_width="match_parent"
			android:background="#999999"
			android:layout_height="1dp"/>

		<LinearLayout
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:orientation="horizontal">

			<ImageView
				android:layout_width="32dp"
				android:layout_height="32dp"
				android:layout_gravity="center"
				android:layout_marginRight="16dp"
				app:srcCompat="@drawable/ic_bookmark_black_24dp"/>

			<android.support.design.widget.TextInputLayout
				android:layout_width="match_parent"
				android:layout_height="wrap_content">

				<EditText
					android:layout_width="wrap_content"
					android:layout_height="wrap_content"
					android:inputType="number"
					android:ems="6"
					android:id="@+id/teNewpageNumber"
					android:hint="Page Number"
					android:selectAllOnFocus="false"
					android:layout_weight="1"
					android:maxLines="2"
					/>
			</android.support.design.widget.TextInputLayout>
		</LinearLayout>

		<View android:layout_width="match_parent"
			  android:background="#999999"
			  android:layout_height="1dp"/>
		<LinearLayout
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:orientation="horizontal">
			<ImageView
				app:srcCompat="@drawable/ic_event_black_24dp"
				android:layout_gravity="center"
				android:layout_width="32dp"
				android:layout_height="32dp"/>

			<LinearLayout
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				android:orientation="horizontal"
				android:layout_weight="1"
				android:id="@+id/lldate">

				<TextView
					android:text="Click to select date..."
					android:layout_width="wrap_content"
					android:layout_height="48dp"
					android:id="@+id/tvDate"
					android:layout_weight="1"
					android:textSize="18sp"
					android:gravity="center_vertical"
					android:paddingLeft="16dp"/>

				<ImageView
					android:layout_width="wrap_content"
					android:layout_height="wrap_content"
					app:srcCompat="@drawable/ic_arrow_drop_down_black_24dp"
					android:id="@+id/imageView2"
					android:layout_gravity="center_vertical"/>
			</LinearLayout>

		</LinearLayout>
		<View android:layout_width="match_parent"
			  android:background="#999999"
			  android:layout_height="1dp"/>
	</LinearLayout>
</LinearLayout>
%%fragment_new_page_child_text
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_gravity="center"
    android:orientation="vertical"
    tools:context="com.twotowerstudios.virtualnotebookdesign.PageActivityMain.NewPageChildFragment">

    <android.support.v7.widget.Toolbar
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        android:background="@color/accent"
        android:id="@+id/tbNewpagechild"
        app:title="Add text"
        />

    <android.support.design.widget.TextInputLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="16dp">
        <EditText
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="Title"
			android:scrollbars="vertical"
			android:maxLines="2"
            android:layout_weight="1"
            android:id="@+id/etTitlePageChild"

			android:inputType="textCapSentences"/>
    </android.support.design.widget.TextInputLayout>

	<android.support.design.widget.TextInputLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="16dp">
        <EditText
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:id="@+id/etBodyPageChild"
            android:hint="Text here..."
			android:inputType="textCapSentences"
			android:scrollbars="vertical"
			android:maxLines="5"
            android:layout_weight="1"

            />
    </android.support.design.widget.TextInputLayout>

</LinearLayout>
%%fragment_new_notebook.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
			  xmlns:app="http://schemas.android.com/apk/res-auto"
			  android:orientation="vertical"
			  android:layout_width="wrap_content"
			  android:layout_height="wrap_content"
			  android:layout_gravity="center"
			  android:background="#ffffff"
			  android:elevation="24dp"
			  android:animateLayoutChanges="true"
	>

	<android.support.v7.widget.Toolbar
		android:layout_width="match_parent"
		android:layout_height="?attr/actionBarSize"
		app:title="Create new notebook"
		android:background="@color/md_amber_400"
		android:id="@+id/newnotebooktoolbar"

		>

	</android.support.v7.widget.Toolbar>

	<LinearLayout
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:orientation="vertical"
		android:layout_marginLeft="24dp"
		android:layout_marginRight="20dp"
		android:layout_marginTop="12dp"
		android:layout_marginBottom="12dp"
		>

		<android.support.design.widget.TextInputLayout
			android:layout_width="match_parent"
			android:layout_height="wrap_content">

			<EditText
				android:layout_width="match_parent"
				android:layout_height="wrap_content"
				android:inputType="textCapSentences"
				android:ems="10"
				android:id="@+id/etNewName"
				android:hint="Name"
				android:selectAllOnFocus="false"
				android:layout_weight="1"
				android:maxLines="1"/>

		</android.support.design.widget.TextInputLayout>

		<LinearLayout
			android:orientation="horizontal"
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			>

			<TextView
				android:text="Custom Color"
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				android:id="@+id/textView6"
				android:layout_weight="1"
				android:textAppearance="@style/TextAppearance.AppCompat.Medium"
				android:textColor="?android:attr/textColorPrimary"/>

			<Space
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				android:layout_weight="1"/>

			<Switch
				android:layout_width="wrap_content"
				android:layout_height="wrap_content"
				android:id="@+id/switch1"
				android:layout_weight="1"

				android:layout_gravity="center_vertical"/>

		</LinearLayout>

		<android.support.v7.widget.RecyclerView
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:id="@+id/rvNewNotebook"
			android:overScrollMode="never"
			>

		</android.support.v7.widget.RecyclerView>

	</LinearLayout>
</LinearLayout>
%%fragment_modal_bottom_sheet.xml
<LinearLayout
	xmlns:android="http://schemas.android.com/apk/res/android"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	xmlns:app="http://schemas.android.com/apk/res-auto"
	android:orientation="vertical"
	android:padding="16dp"
	app:layout_behavior="@string/bottom_sheet_behavior"
	android:id="@+id/bottom_drawer">

	<TextView
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:text="Add picture from..."
		android:paddingBottom="16dp"
		android:textAppearance="@style/TextAppearance.AppCompat.Display1"
		android:textSize="18sp"
		android:textColor="?android:attr/textColorPrimaryNoDisable"/>
	<View
		android:layout_width="match_parent"
		android:layout_height="1px"
		android:background="#dddddd"
		/>
	<android.support.design.widget.TextInputLayout
		android:layout_width="match_parent"
		android:layout_height="wrap_content">
		<EditText
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:paddingTop="4dp"
			android:paddingBottom="4dp"
			android:id="@+id/etImageTitle"
			android:inputType="textCapSentences"
			android:hint="Title..."
			android:selectAllOnFocus="false"
			android:layout_weight="1"
			android:maxLines="2"/>
	</android.support.design.widget.TextInputLayout>
	<View
		android:layout_width="match_parent"
		android:layout_height="1px"
		android:background="#dddddd"
		/>
	<LinearLayout
		android:layout_width="match_parent"
		android:layout_height="80dp"
		android:layout_marginLeft="32dp"
		android:layout_marginRight="32dp"
		android:orientation="horizontal"
		android:layout_marginTop="16dp">
		<LinearLayout
			android:layout_width="56dp"
			android:layout_height="80dp"

			android:orientation="vertical"
			android:id="@+id/bottomCameraButton">
			<ImageView
				android:layout_width="match_parent"
				android:layout_height="wrap_content"
				app:srcCompat="@drawable/ic_camera_alt_black_24dp"
				android:tint="#606060"/>
			<TextView
				android:layout_width="match_parent"
				android:layout_height="wrap_content"
				android:text="Camera"
				android:textAppearance="@android:style/TextAppearance"
				android:textAlignment="center"/>
		</LinearLayout>
		<Space
			android:layout_width="wrap_content"
			android:layout_height="match_parent"
			android:layout_weight="1"/>
		<LinearLayout
			android:layout_width="56dp"
			android:layout_height="80dp"
			android:orientation="vertical"
			android:id="@+id/bottomGalleryButton"
			android:alpha="0.3">
			<ImageView
				android:layout_width="match_parent"
				android:layout_height="wrap_content"
				app:srcCompat="@drawable/ic_collections_black_24dp"
				android:tint="#606060"
				/>
			<TextView
				android:layout_width="match_parent"
				android:layout_height="wrap_content"
				android:text="Gallery"
				android:textAppearance="@android:style/TextAppearance"
				android:textAlignment="center"/>
		</LinearLayout>
	</LinearLayout>
</LinearLayout>
%%navdrawerheader.xml
<?xml version="1.0" encoding="utf-8"?>

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/activity_main"
    android:layout_width="240dp"
    android:layout_height="144dp"
    android:background="@drawable/header">

    <TextView
        android:text="TextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentStart="true"
        android:layout_marginLeft="16dp"
        android:layout_marginStart="18dp"
        android:layout_marginBottom="33dp"
        android:id="@+id/textView2"
        android:textColor="?android:attr/textColorPrimary" />

    <TextView
        android:text="TextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/textView"
        android:textColor="?android:attr/textColorPrimary"
        android:layout_alignParentBottom="true"
        android:layout_alignLeft="@+id/textView2"
        android:layout_alignStart="@+id/textView2" />
</RelativeLayout>
%%pagelistitem.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
			  xmlns:app="http://schemas.android.com/apk/res-auto"
			  android:layout_width="match_parent"
			  android:id="@+id/llpagelistitem"
    android:layout_height="wrap_content"
    android:orientation="vertical">

	<RelativeLayout
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		android:layout_margin="16dp">
		<TextView
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:text="9999"
			android:ems="2"
			android:id="@+id/tvFavPage"
			android:layout_marginRight="8dp"
			android:textSize="24sp"
			android:textColor="#777777"
			android:textStyle="normal|bold|italic"/>

		<TextView
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:text="Modified 5 days ago. 12 items"
			android:textColor="@color/colorAccent"
			android:id="@+id/tvFavSub"
			android:layout_toRightOf="@id/tvFavPage"
			android:layout_below="@+id/tvFavName"
			android:layout_toEndOf="@+id/tvFavPage"
			android:textSize="16sp"
			android:fontFamily="sans-serif"/>

		<TextView
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:text="The study of Genetics and Geriatrics"
			android:id="@+id/tvFavName"
			android:textAppearance="@style/TextAppearance.AppCompat.Medium"
			android:layout_toRightOf="@+id/tvFavPage"
			android:layout_toLeftOf="@+id/ivFavStar"
			android:textSize="16sp"
			android:fontFamily="sans-serif"
			android:textColor="?android:attr/textColorPrimary"/>

		<ImageView
			app:srcCompat="@drawable/ic_star_white_24dp"
			android:id="@+id/ivFavStar"
			android:tint="@color/colorAccent"
			android:layout_alignParentRight="true"
			android:layout_alignParentTop="true"
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:visibility="visible"
			android:layout_alignBottom="@id/tvFavName"/>

		<TextView
			android:layout_height="wrap_content"
			android:layout_width="24dp"
			android:text="87 items"
			android:textSize="9sp"
			android:textAlignment="center"
			android:id="@+id/tvFavItemCount"
			android:layout_below="@+id/ivFavStar"
			android:layout_alignRight="@+id/ivFavStar"
			android:layout_alignTop="@+id/tvFavSub"/>


	</RelativeLayout>

	<View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="#dddddd"/>
</LinearLayout>
%%notebookselectioncard.xml
<?xml version="1.0" encoding="utf-8"?>
<android.support.v7.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_height="wrap_content"
    android:layout_width="match_parent"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_gravity="center"
    android:elevation="8dp"
    app:cardCornerRadius="4dp"
    android:layout_marginLeft="4dp"
	android:layout_marginTop="4dp"
    android:layout_marginRight="4dp"
    app:cardUseCompatPadding="true"
    android:id="@+id/notebookSelectionCard">

	<RelativeLayout
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:id="@+id/rlcard">
		<TextView
			android:layout_width="wrap_content"
			android:layout_height="wrap_content"
			android:text="SUBJECT"
			android:textSize="18sp"
			android:layout_marginLeft="16dp"
			android:layout_marginTop="8dp"
			android:layout_marginBottom="16dp"
			android:textColor="@color/md_black_1000"
			android:id="@+id/tvCardNameSel"
			/>

		<TextView
			android:layout_width="200dp"
			android:layout_height="wrap_content"
			android:text="Last modified of 1969/12/31, 19:00:00"
			android:id="@+id/tvCardSub"
			android:layout_alignTop="@+id/tvCardNameSel"
			android:layout_alignStart="@+id/tvCardNameSel"
			android:paddingTop="24dp"
			android:layout_marginBottom="4dp"
			android:layout_alignLeft="@+id/tvCardNameSel"
			android:textSize="14sp" />
		<ImageView
			android:contentDescription="notebook"
			android:layout_width="36dp"
			android:layout_height="36dp"
			app:srcCompat="@drawable/ic_book_black_36px"
			android:id="@+id/tvCardImage"
			android:layout_centerVertical="true"
			android:layout_alignParentRight="true"
			android:layout_alignParentEnd="true"
			android:layout_marginRight="16dp"
			android:layout_marginEnd="16dp" />

		<TextView
			android:text="44 debugNumOfPages"
			android:layout_width="55dp"
			android:layout_height="40dp"
			android:id="@+id/tvPageCount"
			android:layout_centerVertical="true"
			android:layout_toLeftOf="@+id/tvCardImage"
			android:layout_toStartOf="@+id/tvCardImage"
			android:textStyle="normal|bold"
			android:textAllCaps="false"
			android:textAlignment="center"
			android:textSize="16sp"/>
	</RelativeLayout>

</android.support.v7.widget.CardView>
%%pchild_drive.xml
<?xml version="1.0" encoding="utf-8"?>
<android.support.v7.widget.CardView
	android:layout_height="wrap_content"
	android:layout_width="match_parent"
	android:layout_margin="4dp"
	xmlns:android="http://schemas.android.com/apk/res/android">

	<LinearLayout
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		android:layout_marginLeft="16dp"
		android:layout_marginTop="16dp"
		android:layout_marginBottom="16dp"
		android:orientation="horizontal">
		<ImageView
			android:layout_width="64dp"
			android:layout_height="64dp"
			android:id="@+id/ivChildDrive"
			android:src="@drawable/drivedocs"/>
		<TextView
			android:layout_width="wrap_content"
			android:layout_height="match_parent"
			android:gravity="center_vertical"
			android:id="@+id/tvChildDrive"
			android:layout_marginRight="16dp"
			android:text="This is a placeholder for the document and another thing"
			android:textAppearance="@style/TextAppearance.AppCompat.SearchResult.Title"
			/>
	</LinearLayout>
</android.support.v7.widget.CardView>
%%pchild_image.xml
<?xml version="1.0" encoding="utf-8"?>
<android.support.v7.widget.CardView
	android:layout_height="wrap_content"
	android:layout_width="match_parent"
	android:layout_margin="8dp"
	android:foreground="?attr/selectableItemBackground"
	xmlns:android="http://schemas.android.com/apk/res/android">

	<LinearLayout
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		android:orientation="vertical">
		<ImageView
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:id="@+id/ivChildImage"
			android:background="#707070"
			android:scaleType="centerCrop"
			android:adjustViewBounds="true"/>
		<TextView
			android:layout_margin="8dp"
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:id="@+id/tvChildImage"
			android:text="This is a subtitle, I believe you could do important things"/>

	</LinearLayout>

</android.support.v7.widget.CardView>
%%pchild_text.xml
<?xml version="1.0" encoding="utf-8"?>
<android.support.v7.widget.CardView
	android:layout_height="wrap_content"
	android:layout_width="match_parent"
	android:layout_margin="4dp"
	xmlns:android="http://schemas.android.com/apk/res/android">

	<LinearLayout
		android:layout_height="wrap_content"
		android:layout_width="match_parent"
		android:padding="8dp"
		android:orientation="vertical">
		<TextView
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:textAppearance="@style/TextAppearance.AppCompat.SearchResult.Title"
			android:text="This is a title, btdubs"
			android:maxLength="50"
			android:ellipsize="end"
			android:id="@+id/tvChildTextTitle"
			android:paddingBottom="4dp"
			/>
		<TextView
			android:layout_width="match_parent"
			android:layout_height="wrap_content"
			android:id="@+id/tvChild"
			android:maxLength="250"
			android:ellipsize="end"
			android:text="LOREM IPSUM THIS IS A PLACEholder
		LOREM IPSUM THIS IS A PLACEholder
		LOREM IPSUM THIS IS A PLACEholder
		LOREM IPSUM THIS IS A PLACEholder
		LOREM IPSUM THIS IS A PLACEholder"/>
	</LinearLayout>

</android.support.v7.widget.CardView>

$$Personal Project Report 2.0
Personal Project Report - Diego Granada
(Throughout the text, there are a few tags like this: [Appendix 3] . These tags are to cite a specific part of my appendix, which can be found at the bottom of the report, past the references)
Research
My goal for the personal project is to design, develop, market and release an Android app, specifically an app that will focus on making the lives of Anglo students (and worldwide students as a whole) easier, simpler, more efficient and/or more interconnected by providing them a way to save and organize their notebooks in their phones or maybe even the cloud. My purpose is to release the app, which would surely help many students around the school and world manage to lower their workloads, bag weights and lower the chances of them not delivering work. I intend to achieve a higher degree of interconnectivity between students who may now share notes between them in a more versatile, diverse and intuitive way. I see a future in which students’ final grades are higher and achieve more, with at least some of the credit lying on my app.

The global context in which my project will focus on will be Scientific and Technological Innovation, specifically Modernization, Industrialization and Engineering, given that the project I have planned out would be able to improve the lives of all the students at the Anglo, and possibly worldwide, given that the specific aspect of life that my app targets hasn’t really been touched on by any other app. Similar apps like Evernote or OneNote have a similar premise, but they don’t solve the same thing my app does. I have chosen the global context, mostly due to my previous experience in Science and Technology, being known as the student with the biggest technological knowledge in my grade, it was almost obvious what I would choose. I chose the Global Context based not only on my previous knowledge, but also because I myself am passionate for the subject, and I knew that I would pour my heart and soul into the project. Finally, my current plans for a future career have to do with Science and Technology, so the personal project would help me get into a good university and maybe into a lucrative job in the future.

For the creation of the app, I have many previous projects and experiences to credit for my previous knowledge. First of all, I taught myself how to program in Java when I was 11 years old, then I started to learn more languages slowly through Codecademy.com and various other online resources. I tried multiple times to learn how to make apps for Android but could never get close to achieving it. In the summer of 2013, I managed to fly to Stanford and enroll in an ID Tech course for Android App Development. There I learned to program in a structured class environment for the first time. That knowledge has been invaluable for the things to come. I developed and released a small video game called Clickr, which was not successful, mostly due to the fact that it was absolutely terrible, yet for the people that did play it, it quickly became extremely addicting. Last year in 8th grade, I developed two different apps for some school projects. The first was an app containing info about “Of Mice and Men” which I turned in for English class. The second was a “Social Media Campaign” app that taught people multiple ways of conserving resources and reducing their carbon footprint. Finally, I have also developed two apps, as of yet unreleased that were made to solve some problem or inconvenience that I had in real life. From there, I started to realize I could easily create an app to solve most of the inconveniences of life.


Programming is a complicated subject to source and reference, as it is mostly learnt by reading , adapting and understanding others’ code. For this reason, I decided, with my instructor’s blessing, to only reference pages from whom I took code, although almost every time I changed it and adapted it to My main sources, aside from previous experience like my Java for Dummies book were StackOverflow.org, Google’s official Android documentation and Codepath.com. StackOverflow is the biggest programmer’s Q&A website, and it is where most programmers come to when in need of help. The amount of issues and subjects that StackOverflow deals with is impressive, although their reliability is not perfect, as the answers are crowd-sourced, but the risk that comes from wrong answers is very low, so I believe that SO’s drawbacks are greatly overcome by its benefits. The official Android documentation and Material Design rules are made by Google themselves, and are usually the most reliable source of information. They either only teach basic concepts without going in-depth on their lessons, or very specific information on obscure subjects with little explanation, so it is insufficient as a lone source. Finally Codepath is a crowd-sourced but heavily moderated site that hosts a very large number of high-quality guides on how to do various things in Android. It’s reliability is in between Google’s documentation and StackOverflow’s wild west, but their lessons are much better than Google. These three sources are the most important parts of my research, and each of them covers a different purpose.

Material Design Guidelines: Google (n.d.). Introduction - Material design  Retrieved September 28, 2016, from http://material.google.com/ 

Android Developers: Google (n.d.) Android Developers. Retrieved September 28, 2016, from https://developer.google.com 

StackOverflow: Stack Overflow (n.d) Stack Overflow. Retrieved September 28, 2016, from http://stackoverflow.com 

CodePath: CodePath (n.d.) CodePath Android Cliffnotes. Retrieved September 28, 2016, from http://guides.codepath.com/android 

Java for Dummies book: Lowe, D. (2011). Java all-in-one for dummies. Hoboken, N.J.: Wiley.

Planning
The product must improve the life of students by making a specific aspect of their lives more efficient. The way that this will be carried out by my app is to target the aspect of note taking and use of notebooks at school. Almost every student will end up having their phone’s gallery filled to the brim with photos of various notebook pages, whiteboards and textbook sections in a disorganised and chaotic manner. To improve this, my app will allow students to create “Virtual Notebooks”, sorted by pages which will allow students to take photos of each page of their notebooks and other relevant images for each page (such as the section of a textbook that was used or what was written on the whiteboard at the time), sort these photos by individual pages and individual notebooks and save them onto their phone. This gives various advantages: it reduced the amount of text that a student will have to write down, they can focus less time and effort on writing sections of textbooks verbatim and can spend that time actually making sense of what they read, while also spending more time working on the actual work they have to do and they could quickly access their notebooks from places like home without having to carry them in their physical form. To do this though, my app must also follow a high standard of visual quality & appeal (as in the user interface) which will be achieved by following Google’s Material Design guidelines as much as possible, and also the app will be rigorously tested to reduce the amount of bugs present. If there are any visible bugs at the time the app is close to finished, I will not release it. My app must be completely functional and as bug-free as possible before I start to move onto my stretch goals. As a final test, I will conduct a small week or two week long beta test with myself and other Anglo Android users to try the app out and report any bugs or errors present.  Once my app is actually released, I will also continue to maintain it, making sure that all the bugs which are reported to me are fixed in a timely manner.

From early on in the project, I laid out my Action plan and goals. The following is my goals, divided into three categories in descending order of priority and achievability: main, possible and stretch goals.



Down below is my abridged preliminary action plan. My product does not have a projected schedule, nor is not guaranteed to follow the action plan perfectly due to the volatility and chaotic nature that is developing an app alone. From the time I first wrote down the action plan, already did I have to skip some steps (Like step 4) in order to save time and focus on the app itself.

Preliminary steps
Step 1: Identify realistic and stretch goals.
I will identify and sort my goals into three categories: Main, possible and stretch goals. I expect to complete all main goals, and if I’m done early, do some of the possible and stretch goals, but these are not required.
Step 2: Start refreshing my memory on Android Material Design guidelines.
Material Design is the name given to Google’s rules on how Android apps should look in order to have a unified and professional look. The rules are relaxed, but many in quantity, so it is important that I go over them once again to make sure that my product abides by them from the start. 
Step 3: Start preliminary design of the various pages in my app.
While designing on paper the design of my app would possibly help, it also takes a long time, and doesn’t take into account the challenges I may face in the future, so instead I decided to have a rough idea in my head of the look of the app, but do most of the design decisions when I’m doing the layout itself. This way I can avoid unexpected complications and obstacles with the design. 
Step 4: Identify and list the things I’ll have to do and learn for each page
I will make a list containing all the elements of each activity that I believe will be necessary for efficient functionality.

Step 5: Start the actual project - Prototyping
I’ll start using Android Studio 2.2 to start creating the actual application. At first I will start making simple pages with basic designs but near-fully functional features. I must finish about half of my Main goals by the end of this. I intend to have almost all critical features and abilities done, no matter how badly done

Step 6: Code cleanup and standardization
Before I start my designs, I will use the experience and knowledge of my code by then to start cleaning up the code and fixing most bugs. I want to make it so that making changes to the backbone of my application will be an easy and painless process. A clean codebase will always help keep bugs down in the future.

Step 7: Aesthetics and design
Once my code is clean and mostly bug-free, it’ll be time to start giving the app a working design, which loosely follows Material Design guidelines, as described in my goals. I will start actually programming the layout itself and starting to make the interface responsive and cleaner-looking. I intend to complete the final look of the app by the end of this.

Step 8: Start working on possible and stretch goals (If there is time left)
Once the app’s main goals are complete, I will try to accomplish some of the possible and stretch goals I have laid out for my app. However, the only goals required for completion are the main ones.
Step 9: Release
Release the product. I will receive user feedback and use it to further develop my app, while adding new features of my own. Hopefully I can monetize the app.

Action
My product at this stage is an Android application designed to improve and optimize the lives and work of students around the globe. This is done by providing an app which allows students to store photos and text from their notebooks in an organized way. The app allows the creation of virtual notebooks to achieve this. A student creates a virtual notebook based on their real life notebook, then fills it with pages, each corresponding to a different page in their real life notebooks. These pages can be organized by name, date, page number and they can be set as favorites for quick selection. In each page, a student would save different images for each portion of their page, so for example they could take a picture of the entire page, then another zooming into a diagram, another focusing on a specific paragraph, a photo of the whiteboard in class and a photo of the textbook from which they got the questions they answered in their notebooks. This virtual notebooks have the benefits of increasing the context a student will have when they look back on their old notes months later, no longer having pages filled with answers but no questions. Another benefit this provides is the ability to carry all of the knowledge you have written down in school right in your smartphone. Even though these two things can be done by students simply taking pictures with their phones, the app focuses on organizing these pictures and text in a structured manner.

The development of the app has been plagued with delays, due to the complexity of the code, and my inexperience with development at this scale. Entire weeks have been wasted on insignificant bugs or complete overhauls to the app which get overwritten the next week. The total time spent on the app is ridiculous, I would estimate a rough average of 12 hours weekly of work (not an exaggeration), with there being a 40-60% ratio between programming and research (look at my references list). Some portions of code were so repetitive and complicated, it was quicker to write and teach a separate program in Python to write code for me instead of doing it myself. At around December, the total word count of code written by me was around 32,000 words, and that number only continues to grow with every new update. The updates have been many and with large amounts of work for each, However, I do believe that this has allowed my app to have a very high standard of quality, as the bugs in it are far-and-few despite its unfinished state. Each insignificant small new feature is often surrounded by way over an hour of research and half and hour of coding, while major updates can take upwards of 10 full hours of research with 8 hours of coding. This research can be looking at a structured guide on Google’s website, or it can mean looking into the source code of an open source application that doesn’t attempt to try and make its code readable at all, a task which could be compared to trying to understand ancient manuscripts. Programming is very unique in the sense that small mistakes can take huge amounts of time to fix because of their complexity and obscurity. It’s like solving puzzles time and time again. Due to these time problems, I have been forced to forfeit my possible and stretch goals, instead focusing on leaving the app in the best and most polished state it can be in. 

During development, the app has gone through monumental back end changes which often had very little actual visible changes to show for it. An example was the biggest two commits I have done to the app as of now. The first was introducing a database system called SQLite which first allowed me to store the notebooks in a file. [Appendix 1] With that I was able to create the backbone for the screen seen on the left. Implementing that took me over 6 complete hours of work, with almost another 5 hours in research. Only 7 days later I had deleted all of it, and replaced it with a system and syntax for files called JSON, which does the same work but in a more efficient and useful way.. [Appendix 2] Github, the site I use to store my code says between those two major changes, there were 1365 new lines of code and 486 lines of code deleted. The amount of work hasn’t gone unnoticed, I have been praised by teachers and peers alike on my dedication, working almost every day, both at school and at home in order to complete the project.
Reflection
The app, at this moment is already at a functional and  largely bug free state. I’ve even started using it in my daily student life, and can attest personally to the usefulness of the app, and I say this in the least biased way possible. This is the perfect moment to look over my main goals again: 
Of the goals laid out here, only the last two have not been accomplished, but this was an intentional decision. I have decided to not release my app yet, and instead work on it on my free time in order to get the app to the very highest possible quality I can. The app, however useful it is now, could be much better if given more attention and time. The app followed my specifications completely, and made very little compromises in quality or usability. While some of my ideas had to be scrapped, the ones that did make it through have done it at a very high level of quality. Despite the huge complexity of my code, none of those problems are made known to the user, who is instead provided with a simple and responsive app to help them in their daily student life. Maybe I could uphold Material Design better by improving the animation quality of the app, however this was too complicated to complete within the time window.

The process itself was extremely difficult and long. I estimate based on times I recorded that I  worked a total of 120 hours on the project, if not more. I also made a total of 65 commits to my project, seen here: https://github.com/coldblade2000/VirtualNotebookDesign/commits/master.         The scale and complexity of the code was definitely not something I expected, and there were times where I just had to stop working because I couldn’t deal with all the complexity that kept weighing down on every part of the app. Understanding why the list of an adapter inside a fragment inside a viewpager inside an Activity isn’t working only under specific circumstances is not an easy task, as I found out during the course of 10 hours of work. An example of the scale of my project: my code consists of 173,517 characters, which when divided by the average number of characters per word in English, I’m estimated to have written 38,559 words, equal to 11 personal project reports. If it wasn’t for the research I used, there is absolutely no way I could have even come close to getting the app to work, but I’ve learn so much from all this. I am now finally confident in my programming abilities, and there’s sections were I don’t even have to research to complete features. The project and its process will help me greatly in life, both for what it taught me and for the features my app provides. My previous knowledge, which included self-taught Java programming, plus a basic Android course in Stanford 3 years ago, with some basic previous app development helped me get started with being able to understand my research, but the difference in ability between me before and after the project is monumental. I’ve learnt SO much, and I also realized that there’s so much more I can learn. A short list of things I’ve learnt:
Using RecyclerViews
Using Adapters
Android Activity lifecycle
Persistence
File manipulation
JSON
Material Design
Improved knowledge of algorithms
Dealing with the Android filesystem
Inventing, organizing and using a Unique Identifier System [Appendix 3]
User friendliness
and so much more.

I feel like my project also ties in quite nicely with the second part of the global context: Scientific and Technological Innovation, as it has done its job of using technology to aid students in their daily lives. Using technology to improve the quality of life is part of Modernization, Industrialization and Engineering, another thing in which my app excels at. The app has already improved my school life, and some friends of mine are already asking for a download link. In essentially every possible way, the product was a complete success, and it has given me the possibility to turn the personal project into a more complex and fruitful project full of potential, to the point where I may even be capable of monetizing it. There’s improvements I could do to the app, certainly none I could do before the Personal Project is handed in, but nonetheless improvements that would give the app a good chance of success on the Google Play Store. I intend on improving and later releasing my app. Not only for me, but also for all the students who don’t know how much their life could improve with the app.


References
Android: Convert date to milliseconds. (2012). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/9671085/android-convert-date-to-milliseconds
Best way to work with dates in Android SQLite. (2016). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/7363112/best-way-to-work-with-dates-in-android-sqlite
Bottom Sheets. (2017). Material Design. Retrieved 24 January 2017, from http://www.materialdoc.com/bottom-sheets/
chiuki/android-recyclerview. (2017). GitHub. Retrieved 24 January 2017, from https://github.com/chiuki/android-recyclerview/blob/master/app/src/main/java/com/sqisland/android/
recyclerview/GridLayoutVariableSpanSizeActivity.java
code-troopers/android-betterpickers. (2017). GitHub. Retrieved 24 January 2017, from https://github.com/code-troopers/android-betterpickers
CodePath (n.d.) CodePath Android Cliffnotes. Retrieved September 28, 2016, from http://guides.codepath.com/android
Creating a button in Android Toolbar. (2012). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/31231609/creating-a-button-in-android-toolbar
google/gson. (2017). GitHub. Retrieved 24 January 2017, from https://github.com/google/gson
Google (n.d.). Introduction - Material design  Retrieved September 28, 2016, from http://material.google.com/ 
Google (n.d.) Android Developers. Retrieved September 28, 2016, from https://developer.google.com 
Granada, D. (2015). coldblade2000/Clickr. GitHub. Retrieved 24 January 2017, from https://github.com/coldblade2000/Clickr/blob/master/app/src/main/java/com/twotowerstudios/clickr/SharedPrefs.java
Gupt, M. (2015). Android Action Bar In A Dialog Using ToolBar - Truiton. Truiton. Retrieved 24 
January 2017, from http://www.truiton.com/2015/04/android-action-bar-dialog-using-toolbar/
How do I delete files programmatically on Android?. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/24659704/how-do-i-delete-files-programmatically-on-android
How to add a check box to an alert dialog. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/9763643/how-to-add-a-check-box-to-an-alert-dialog
How to change colors of parent Fragment and views of RecyclerView depending on OnClickListener position from recyclerview. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/40601129/how-to-change-colors-of-parent-fragment-and-views-of-recyclerview-depending-on-o
How to count number of records in sqlite in Android. (2012). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/12436596/how-to-count-number-of-records-in-sqlite-in-android
How to randomly receive a Material Design Color?. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/32655342/how-to-randomly-receive-a-material-design-color
How to sort an arraylist of objects by a property?. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/2535124/how-to-sort-an-arraylist-of-objects-by-a-property
Judd, S. (2017). bumptech/glide. GitHub. Retrieved 24 January 2017, from https://github.com/bumptech/glide
Liu, C. (2015). Storing App-Related Data in Your Android Apps - Developer.com. Developer.com. Retrieved 24 January 2017, from 
http://www.developer.com/ws/android/storing-app-related-data-in-your-android-apps.html
Lowe, D. (2011). Java all-in-one for dummies. Hoboken, N.J.: Wiley.
Mastering the Coordinator Layout · Saúl Molinero. (2017). Saulmm.github.io. Retrieved 24 January 2017, from http://saulmm.github.io/mastering-coordinator
Mikepenz,. (2017). mikepenz/MaterialDrawer. GitHub. Retrieved 24 January 2017, from https://github.com/mikepenz/MaterialDrawer
Peitek, N. (2016). Gson — Getting Started with Java-JSON Serialization & Deserialization. Futurestud.io. Retrieved 24 January 2017, from https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization
Stack Overflow (n.d) Stack Overflow. Retrieved September 28, 2016, from http://stackoverflow.com 
Tamada, R. Android working with Card View and Recycler View. androidhive. Retrieved 24 January 2017, from http://www.androidhive.info/2016/05/android-working-with-card-view-and-recycler-view/
the-blue-alliance/spectrum. (2017). GitHub. Retrieved 24 January 2017, from https://github.com/the-blue-alliance/spectrum/blob/master/spectrum/src/main/java/com/thebluealliance/spectrum/internal/ColorUtil.java
Using DialogFragment | CodePath Android Cliffnotes. Guides.codepath.com. Retrieved 24 January 2017, from https://guides.codepath.com/android/Using-DialogFragment
Using the App Toolbar | CodePath Android Cliffnotes. Guides.codepath.com. Retrieved 24 January 2017, from https://guides.codepath.com/android/Using-the-App-ToolBar

Appendix

1
31 of October - 1st of November
Wow, ok. This is a pretty huge change, probably the biggest amount of changes done since I started the app. In the span of 48 hours, I wrote or overwrote 544 lines of code. The biggest change was actually making the Notebook Selection Screen do something worthwhile. For this, I had to learn a whole new subject in computing: Databases. I had to learn how to deal with and use SQLite, a language used for making accessible databases programmatically. Learning to use SQLite is hard enough, considering it is a whole language. But to learn how to parse it and to execute it using Java is almost absurd. My reference list probably grew by half after this, due to the insane amount of research I had to do. I worked at school, during classes, in tutor time, in recess, in the bus and at home.

Now, the question is: What did I actually do?. The answer is not so simple. I created a way to use an SQLite database to save and load notebooks into a file, stored in the local storage of the user’s phone. I then edited the NotebookSelection activity in order to make it load and display the notebooks that were found in the database. This, as simple as it sounds is extremely complicated, mostly due to the fact that a single mistake across almost 40 kilobytes of text can completely make the work you’ve done invalid, and finding the mistake is extremely hard. It’s like finding a single spelling error in an 8000 word essay, and the spell checker didn’t find anything. Right now, the notebooks that are displayed are made up of a predetermined selection, hardcoded into the app. In order to make these quicker, instead of having to pick a different name, color, date and page size for each, I wrote a little python script that did the work for me. Here it is: 

import random

names = ["Art","Biology","Chemistry",
         "DT","ECL","English",
         "History","Math","PE",
         "Physics","Science","Spanish",
         "Philosphy","Geography","Politics",
         "Economy","I.C.T.","Robotics",]
colors = ["#f44336", "#e91e63", "#9c27b0",
          "#673ab7","#3f51b5","#2196f3",
          "#03a9f4","#00bcd4","#009688",
          "#4caf50","#8bc34a","#cddc39",
          "#ffeb3b","#ffc107","#ff9800",
          "#ff5722","#795548","#607d8b"]
def generate():
    randName = names[random.randint(0,len(names)-1)]

    randColor = colors[random.randint(0,len(colors)-1)]

    randPages = random.randint(1,99)

    randDay = random.randint(1,30)
    randMonth = random.randint(1,12)

    if randDay >=1 and randDay <= 9:
        randDay = "0%s" % randDay
    else:
        randDay = "%s" % randDay

    if randMonth >=1 and randMonth <= 9:
        randMonth = "0%s" % randMonth
    else:
        randMonth = "%s" % randMonth
    print "\n\n a = new Notebook(\"%s\",\"%s\", %s, Helpers.stringDataToMillis(\"2016/%s/%s\")); sql.addNotebook(a);" % (randName,randColor,randPages,randMonth,randDay)
generate()
goOn = raw_input("\nAnother number? write x to quit:  ")
while goOn != "x":
    generate()
    goOn = raw_input("\nAnother number? write x to quit:  ")
As an example of the magnitude of work done these past two days, this script was easy and short in comparison. The script auto-generates lines of code which define random values for the notebooks.

Right now the Notebook Selection screen displays the name of the notebooks, the id of the notebooks, the page count and the date in which it was last modified. All of these values are fake for now, but soon enough they won’t be. 
For a more technical description of the changes, I link here the last commit of the 1st of November, upload to Github: 
Wow 2.0.
I finished the SQLite implementation.

What does this mean? It means I can now create Notebook objects with their values, store them in an SQLite database (as in an actual file), and retrieve them whenever needed. Not only that, but I also adjusted the NotebookSelection activity to read all the notebooks found in the SQL database and then create a new NotebookSelectionCard for each of them. Right now, the app detects if it is set to debug mode (true by default), checks the database to see if it already has a set of debug notebooks assigned, and if not the app will save a list onto the database consisting of different simple notebooks I made. Since it was a pain to do each notebook individually, I wrote a python script that will randomly generate notebooks
for me on demand, and give me a line of code, ready to be pasted in.

I’m going to add in the main references I used these past two days. I only list sources from which I actually copy and pasted code from. 

Best way to work with dates in Android SQLite. (2014). Stackoverflow.com. Retrieved 1November 2016, from http://stackoverflow.com/questions/7363112/best-way-to-work-with-dates-in-android-sqlite
Bradbury, N. (2014). How to count number of records in sqlite in Android. Stackoverflow.com. Retrieved 1November 2016, from http://stackoverflow.com/a/12438482
Granada, D. (2015)  Clickr/SharedPrefs.java at master. Github.com. Retrieved 1November 2016 from https://github.com/coldblade2000/Clickr/blob/master/app/src/main/java/com/twotowerstudios/clickr/SharedPrefs.java
Gekht, A. (2012). Convert date to milliseconds. Stackoverflow.com. Retrieved 2 November 2016, from http://stackoverflow.com/questions/9671085/convert-date-to-miliseconds

Liu, C. (2015). Storing App-Related Data in Your Android Apps - Developer.com. Developer.com. Retrieved 1November 2016, from http://www.developer.com/ws/android/storing-app-related-data-in-your-android-apps.html

Saving Data in SQL Databases (2016) developer.android.com. Retrieved 1, November 2016 from https://developer.android.com/training/basics/data-storage/databases.html 

From now on, I decided to start documenting my references more strictly, fearing the consequences that may come. As dumb as I consider spending 15-25 minutes each day on citethisforme.com, I will do so anyways only on references that meet either of these criteria: 
They teach a whole subject by themselves to me, and I learn a lot using that specific source.
I copied and pasted their code into my app, adjusting it to my needs. I’ll only do so if the article doesn’t mention the use of any license which would not allow the use of their code. I will provide attribution at the end of the project, but I’d rather focus first on the actual app.


2
November 1-4
This is getting absurd...
This is the third time already that I overhaul the entire backend of the app. I finally understood one of the bigger challenges I’ve ever dealt with while programming. Turns out, when you write a file, it isn’t just writing a random string or anything, it is writing pure binary data so you can store and then recover actual java objects. This is incredible because it means after some work on the Helpers.java file, I can write and read from files in just one or two lines. Second, i also finally found out how to use JSON, and ditched SQLite for good. All that progress I did in the last change is pretty much lost. Now I have used the GSON library from google that allows me to spend only one or two lines of code to get and store the entire notebook list from anywhere.  What this means is that now the list of notebooks can now be more dynamically altered or read, allowing me to progress easily with my app. I will also attach my commit message, because it contains more information.
Well I messed up... I was researching for hours on how to start using JSON, because I knew I'd need it eventually to store the contents of each notebook. Then suddenly I found out something. It turns out that I was just looking at a huge problem from the wrong angle. I never knew how to store or read information from a file because I never looked closely at how the code works. Turns out that writing a file isn't supposed to write human-readable text, rather it prints out pure binary that can be deserialized into a normal java objects which can be used again. WOW! HOLY....!

It might not sound huge to someone who doesn't know programming, but finding this out has quickly improved everything I used to think about files. With that holy grail of knowledge, I then started to research on how to tackle that JSON issue, which I very quickly found out how. Google's GSON library allows me to (hold onto your hats, guys) give it any object (int, ImageView or even a full ArrayList!) and in only two lines of code it will create a string consisting of JSON code. With another two lines of code, I can turn that string back into a complete Java objects that I can manipulate and use normally. WOW!

So what did I do these few days? Remember Wow 2.0? Yeah, that's all gone now. the SQLiteHelper class was completely deleted, all code referencing it erased and replaced. In its place, I have created methods which will allow me to do the following things:
* Get a string and write it to a file in the phone's internal memory
* Read a file in internal memory and return the string that the file contains
* A method that will return an ArrayList of every Notebook object found in the "Notebooks.json" file. This is HUGE for my app. I pretty much saved myself entire days worth of work with this little method, a mere 8 lines of code just saved my schedule.
* A method that writes an ArrayList of Notebooks to a file.
* A method that will add a new notebook by getting the ArrayList of Notebooks from file, iterating through every Notebook's name and adding the notebook if no existing notebooks have the same name.
* A method that will delete a Notebook from the list by getting the ArrayList of Notebooks from file, iterating through every Notebook until it finds the notebook that has the same name that the user intends to delete.

Not only that, but I refactored and replaced huge amounts of code. Some examples here:
* Completely refactored the InitNotebooks class, it now uses JSON methods and my methods instead of relying on SQLite.
* Deleted NotebookSelectionCard activity. Turns out it was completely redundant. Now the NotebookSelection RecyclerView is populated by pure Notebook objects. This creates an almost null change in behaviour, but removed the overhead of an extra object for every NotebookSelection card.
* Added a bunch of methods to Notebook.java, ripped from NotebookSelectionCard.java
* Made randomNotebookGen.py script return full lists of code, not just one Notebook code line at a time
* Added references.








3
This change had major implications under-the-hood. The most notable change (to me, at least) was the creation of a Unique Identifier system. This is a system which assigns every object I make a unique, random sequence of numbers and letters. The system works this way: When an object like a Notebook or a Page is created, it is assigned a few variables, like the name, color, text, date, etc. These variables are mostly all provided by the user. However there is another variable saved in it, one that the user never even finds out exists. It’s a sequence of 17 characters. The first character is a type identifier. Notebooks will have the first character be “n”, pages will have “p”, etc. Then the next 16 characters are a sequence of random 64-bit characters, as in for each character of those 16, there are 64 different possibilities like lowercase & uppercase letters, numbers and two special characters. For example, the UID for a page could be:” pFx0_cOymVzSHRfDb”. This UID will be unique and will never repeat itself under normal circumstances. The chance of being repeated is 1 in 79,228,162,514,264,337,593,543,950,336. 

So what does this help me in? It allows me to use these UIDs to identify specific objects when I’m searching for something. If I want to display a specific notebook, update a specific page or make sure two pages aren’t actually the exact same page copied by a bug, I can check their UIDs. Instead of having to get the entire list of notebooks, search for the notebook with the correct name and then search for the page with the correct page I want, I can just use their UIDs. 10 complex lines of code shortened to just a simple one.


Pictures

$$Journal

Journal - Diego Granada
Important note: 
Aside from this journal, a more specific, detailed and thorough explanation of the daily changes my app went through can be found on my Github repository, found here: https://github.com/coldblade2000/VirtualNotebookDesign/commits/master 
1st of September
Started the Action Plan. In the action plan I want to describe a small overview of the broad steps I’ll have to do in order to make my personal project.

14 of September
First meeting with my supervisor called Tim Harris. He and I talked about what I would have to do for my personal project, gave a small timeline of the things he would require from me. I also pitched my idea to him. 

16-19 of September
Created a small working prototype of an app that allowed me to practice and learn how to do one of the things I’ll have to complete for my final app. Specifically, I made an app that used a RecyclerView (like a list) to create Google-style cards in a memory efficient manner and also followed both Material Design standards and looked colorful and beautiful. 
18-22 of September
Continued researching the Material design guidelines (found at https://material.google.com/) and refined the Testing App I made earlier. 

22 of September
Identified the three types of goals I want for my project: Main, Possible and Stretch goals. I’ve put them on a table and plan to follow those goals until the end of the project.

26 of September
I worked on my Action plan and almost finished it. Then I redid my Personal Project Plan, as it was an old one and only contained references to my old idea, not my new one. Aside from that, I started to research similar apps to mine. I quickly noticed something. An app with the same purpose and use that I have plan has never been done before. There are similar apps, which have related uses (products like Evernote, Mod Notebooks and OneNote) but none that actually have the same purpose as mine. My purpose is to save and organize pictures of your notebooks, while products like Evernote and OneNote simply save notes, which have to be typed out. That’s not exactly the same as mine. Even Mod Notebooks doesn’t simply save photos, but instead you have to send your notebook through the mail, and then they digitize it.

What does all this mean? As far as I’m concerned, that means I will be innovating, I will be making something completely new. That’s a deep realization.
28 of September
Today I will work on my research and to analyse my research sources. 

What do I need to research?
I already know how to program Android apps for the most part, I’ve already released two and made a few more already. Nevertheless, I will in fact have to research more for my personal project. This is a list of things I believe I will have to research, how I will research them and how reliable my sources are (A list of rudimentary APA sources will be at the bottom, but they won’t be the ONLY sources I will use for my project):

What will I research?
How/from where will I research them?
How reliable are my sources?
Material Design guidelines
I will use the official Google Design Guidelines (https://material.google.com/) to research most of the design rules I will have to abide by. This site gives me examples of what to do/what not to do and also gives me variables and blueprints which will be extremely useful for my project
https://material.google.com/ is a website created by Google themselves. As you may or may not not, both the Android environment and the Material Design guidelines were both created in-house by Google. So the site I am using is a perfectly accurate primary source (‘perfectly’ because they are the people that decide what’s wrong and what’s right.
How to use various Android methods and pieces of code
For this I will use two major sources, plus various minor sources found on Google, too many to list. The two major sources will be the Android Developer website and StackOverflow.com

Android Developers
This is an official website created by Google to host all kinds of information which will benefit developers. These kinds of information can be: Small tutorials to implement or use specific features (e.g.: teaching readers how to make a list in an app), in-depth descriptions of individual methods, variables and classes for reference and also bigger tutorials for bigger projects (e.g.:Marketing and publishing your app)
Stack Overflow
Stack Overflow is a website which focuses on crowd-sourcing solutions and answers for all facets of computer programming, including Android development. Stack Overflow is crowd sourced, a place when users can submit questions, then those will be answered by other users, then those answers will be voted on by other users to sort them by helpfulness in a descending order. It is probably the most valuable resource any programmer, professional or amateur can have. 
Miscellaneous websites
Programming is a tricky skill, and will often have multiple answers for the same problem, or even conflicting answers. For every new feature added to an app, I estimate most programmers use at least 5 sources found on Google, until they find the right one. Listing each of these would be very hard and time consuming, not to mention inefficient. As long as you are using publicly viewed code to learn from and improve yours, instead of copying snippets of code without trying to understand their inner workings, most professional programmers won't consider such an act as plagiarism.





Android Developers
Again, this website is an official website created by Google themselves, which means they are a primary source, which allows them to decide what is wrong and what is right. There is not a source more reliable than this website for Android Development. However, it doesn’t always cover every topic. For that, we have Stack Overflow

Stack Overflow
Stack overflow is crowd-sourced, and any person with an account can create answers. For this reason, SO is not the most reliable source. However, SO also allows the self-moderation done to users, by users, for users. Users with a high enough reputation can vote answers up or down, which makes it so only the helpful answers are seen first. This encourages high-quality answers and also promotes helpful users. This makes Stack Overflow a very reliable secondary source that will almost always be correct. Even when the highest voted answer isn’t perfectly correct, a second or third answer will usually work. I completely trust this source, and so does a staggering percentage of the worldwide population of programmers.

Miscellaneous websites
These websites are often unsourced and are not governed by any third-party entity like Google. This means their code or design suggestions may be incorrect. However, in the world of programming, whenever a piece of code is incorrect, usually the program won’t run in it’s intended fashion, a problem easily found and fixed, or it will simply work anyways. Reliability isn’t a big deal for this, however, it might still be necessary to analyze and cross-reference these websites with official sources, particularly the ones involved with design.
References
Material Design Guidelines: Google (n.d.). Introduction - Material design  Retrieved September 28, 2016, from http://material.google.com/ 

Android Developers: Google (n.d.) Android Developers. Retrieved September 28, 2016, from https://developer.google.com 

StackOverflow: Stack Overflow (n.d) Stack Overflow. Retrieved September 28, 2016, from http://stackoverflow.com 


30 of September
Today I want to finally start the design of the app itself, because I’m becoming impatient waiting to be able to program. I used the website https://Reddit.com/r/androiddev to get suggestions on which designing/prototyping program i should use. I wanted to find a free program that could handle Material Design and could work on Linux, Windows and Mac. Eventually I settled on Pencil, with two Material Design icon packs which are referenced at the bottom.

3 of October
Nevermind, that was a dumb idea. Pencil was so hard to use, learn and extremely inefficient. It was basically a glorified sticker book. Instead, I have decided to use what I am most comfortable with: Java of course. I am going to start coding from now, however, I am strictly doing the design with bare (if any) functionality. I am doing this because I will be able to reuse and adapt my code more easily, plus I can work in an environment that will already follow the possibilities given by programming, instead of later having to deal with stupid hacks (unreliable but effective fixes) to make my final app look like my design. I also appreciate that I can use Github to do this, and to sync my work across three different workstations, while also having versión control which will allow me to revert to previous saves if I mess something up. Since Github commits are much more common than my Journal Entries, I will consider my Github history as a secondary journal, allowing people to see my progress over every time I work on my project. The repository for the design of my app can be found at: https://github.com/coldblade2000/DesignVirtualNotebook 

8 of October
After a tremendous amount of time and technical issues, I finally managed to get Github working well. My new repository, by the way, is here: https://github.com/coldblade2000/VirtualNotebookDesign. I’ve started to work on learning how to use a library that I hope I will use for my project. It is called MaterialDrawer and it will help me make a Navigation Drawer that adheres to Material Design guidelines. By the end of the night, I had added a rudimentary Navigation drawer with a header image that can be tinted to any color



9 of October
So many things happened today. The highlights being an animated expandable floating action button and the beginning of the main menu. I’ll quote my commit message, which has more info: 
“Wow. Added selector in navigation drawer to compare between header designs. Added an animated expandable floating action button with 3 sub-fabs. Have started work on the first card of the app: the "favorite books" card.

Non-working: RecyclerView for cards. Try as I might, nested RecyclerViews don't play nice. It's 2:05 AM, I think I'll sleep now “


Header 1


Header 2 

Header 3




10-16 of October
I worked on creating a horizontal RecyclerView for the quick notebook selection in the home screen, which is now functional. I have yet to add any real function to the notebooks though. The RecyclerView is scrollable in both orientations. I also worked a bit on making the design of the home screen more appealing and conforming to material design standards. 

19-30 of October
Technical issues with my laptop took away a big portion of my time, however I still managed to get some work. Unfortunately, most of the work I’ve been doing has been behind the scenes or getting all the different layout elements to play nice. According to Github, I’ve written or changed over 500 lines of code in the past week.

Anyways, most of my work has been on a new Activity (meaning a new screen or page), which is the Activity in which one can access, create and manage the list of notebooks that the user has. As of now, the list is capable of displaying a near infinite amount of notebooks, as long as enough are provided to it. After this, i plan on making rudimentary sorting options for the different cards and allow you to drag them around.

31 of October - 1st of November
Wow, ok. This is a pretty huge change, probably the biggest amount of changes done since I started the app. In the span of 48 hours, I wrote or overwrote 544 lines of code. The biggest change was actually making the Notebook Selection Screen do something worthwhile. For this, I had to learn a whole new subject in computing: Databases. I had to learn how to deal with and use SQLite, a language used for making accessible databases programmatically. Learning to use SQLite is hard enough, considering it is a whole language. But to learn how to parse it and to execute it using Java is almost absurd. My reference list probably grew by half after this, due to the insane amount of research I had to do. I worked at school, during classes, in tutor time, in recess, in the bus and at home.

Now, the question is: What did I actually do?. The answer is not so simple. I created a way to use an SQLite database to save and load notebooks into a file, stored in the local storage of the user’s phone. I then edited the NotebookSelection activity in order to make it load and display the notebooks that were found in the database. This, as simple as it sounds is extremely complicated, mostly due to the fact that a single mistake across almost 40 kilobytes of text can completely make the work you’ve done invalid, and finding the mistake is extremely hard. It’s like finding a single spelling error in an 8000 word essay, and the spell checker didn’t find anything. Right now, the notebooks that are displayed are made up of a predetermined selection, hardcoded into the app. In order to make these quicker, instead of having to pick a different name, color, date and page size for each, I wrote a little python script that did the work for me. Here it is: 

import random

names = ["Art","Biology","Chemistry",
         "DT","ECL","English",
         "History","Math","PE",
         "Physics","Science","Spanish",
         "Philosphy","Geography","Politics",
         "Economy","I.C.T.","Robotics",]
colors = ["#f44336", "#e91e63", "#9c27b0",
          "#673ab7","#3f51b5","#2196f3",
          "#03a9f4","#00bcd4","#009688",
          "#4caf50","#8bc34a","#cddc39",
          "#ffeb3b","#ffc107","#ff9800",
          "#ff5722","#795548","#607d8b"]
def generate():
    randName = names[random.randint(0,len(names)-1)]

    randColor = colors[random.randint(0,len(colors)-1)]

    randPages = random.randint(1,99)

    randDay = random.randint(1,30)
    randMonth = random.randint(1,12)

    if randDay >=1 and randDay <= 9:
        randDay = "0%s" % randDay
    else:
        randDay = "%s" % randDay

    if randMonth >=1 and randMonth <= 9:
        randMonth = "0%s" % randMonth
    else:
        randMonth = "%s" % randMonth
    print "\n\n a = new Notebook(\"%s\",\"%s\", %s, Helpers.stringDataToMillis(\"2016/%s/%s\")); sql.addNotebook(a);" % (randName,randColor,randPages,randMonth,randDay)
generate()
goOn = raw_input("\nAnother number? write x to quit:  ")
while goOn != "x":
    generate()
    goOn = raw_input("\nAnother number? write x to quit:  ")



As an example of the magnitude of work done these past two days, this script was easy and short in comparison. The script auto-generates lines of code which define random values for the notebooks.

Right now the Notebook Selection screen displays the name of the notebooks, the id of the notebooks, the page count and the date in which it was last modified. All of these values are fake for now, but soon enough they won’t be. 
For a more technical description of the changes, I link here the last commit of the 1st of November, upload to Github: 
Wow 2.0.
I finished the SQLite implementation.

What does this mean? It means I can now create Notebook objects with their values, store them in an SQLite database (as in an actual file), and retrieve them whenever needed. Not only that, but I also adjusted the NotebookSelection activity to read all the notebooks found in the SQL database and then create a new NotebookSelectionCard for each of them. Right now, the app detects if it is set to debug mode (true by default), checks the database to see if it already has a set of debug notebooks assigned, and if not the app will save a list onto the database consisting of different simple notebooks I made. Since it was a pain to do each notebook individually, I wrote a python script that will randomly generate notebooks
for me on demand, and give me a line of code, ready to be pasted in.

I’m going to add in the main references I used these past two days. I only list sources from which I actually copy and pasted code from. 

Best way to work with dates in Android SQLite. (2014). Stackoverflow.com. Retrieved 1November 2016, from http://stackoverflow.com/questions/7363112/best-way-to-work-with-dates-in-android-sqlite
Bradbury, N. (2014). How to count number of records in sqlite in Android. Stackoverflow.com. Retrieved 1November 2016, from http://stackoverflow.com/a/12438482
Granada, D. (2015)  Clickr/SharedPrefs.java at master. Github.com. Retrieved 1November 2016 from https://github.com/coldblade2000/Clickr/blob/master/app/src/main/java/com/twotowerstudios/clickr/SharedPrefs.java
Gekht, A. (2012). Convert date to milliseconds. Stackoverflow.com. Retrieved 2 November 2016, from http://stackoverflow.com/questions/9671085/convert-date-to-miliseconds

Liu, C. (2015). Storing App-Related Data in Your Android Apps - Developer.com. Developer.com. Retrieved 1November 2016, from http://www.developer.com/ws/android/storing-app-related-data-in-your-android-apps.html

Saving Data in SQL Databases (2016) developer.android.com. Retrieved 1, November 2016 from https://developer.android.com/training/basics/data-storage/databases.html 

From now on, I decided to start documenting my references more strictly, fearing the consequences that may come. As dumb as I consider spending 15-25 minutes each day on citethisforme.com, I will do so anyways only on references that meet either of these criteria: 
They teach a whole subject by themselves to me, and I learn a lot using that specific source.
I copied and pasted their code into my app, adjusting it to my needs. I’ll only do so if the article doesn’t mention the use of any license which would not allow the use of their code. I will provide attribution at the end of the project, but I’d rather focus first on the actual app.
November 1-4
This is getting absurd...
This is the third time already that I overhaul the entire backend of the app. I finally understood one of the bigger challenges I’ve ever dealt with while programming. Turns out, when you write a file, it isn’t just writing a random string or anything, it is writing pure binary data so you can store and then recover actual java objects. This is incredible because it means after some work on the Helpers.java file, I can write and read from files in just one or two lines. Second, i also finally found out how to use JSON, and ditched SQLite for good. All that progress I did in the last change is pretty much lost. Now I have used the GSON library from google that allows me to spend only one or two lines of code to get and store the entire notebook list from anywhere.  What this means is that now the list of notebooks can now be more dynamically altered or read, allowing me to progress easily with my app. I will also attach my commit message, because it contains more information.
Well I messed up... I was researching for hours on how to start using JSON, because I knew I'd need it eventually to store the contents of each notebook. Then suddenly I found out something. It turns out that I was just looking at a huge problem from the wrong angle. I never knew how to store or read information from a file because I never looked closely at how the code works. Turns out that writing a file isn't supposed to write human-readable text, rather it prints out pure binary that can be deserialized into a normal java objects which can be used again. WOW! HOLY....!

It might not sound huge to someone who doesn't know programming, but finding this out has quickly improved everything I used to think about files. With that holy grail of knowledge, I then started to research on how to tackle that JSON issue, which I very quickly found out how. Google's GSON library allows me to (hold onto your hats, guys) give it any object (int, ImageView or even a full ArrayList!) and in only two lines of code it will create a string consisting of JSON code. With another two lines of code, I can turn that string back into a complete Java objects that I can manipulate and use normally. WOW!

So what did I do these few days? Remember Wow 2.0? Yeah, that's all gone now. the SQLiteHelper class was completely deleted, all code referencing it erased and replaced. In its place, I have created methods which will allow me to do the following things:
* Get a string and write it to a file in the phone's internal memory
* Read a file in internal memory and return the string that the file contains
* A method that will return an ArrayList of every Notebook object found in the "Notebooks.json" file. This is HUGE for my app. I pretty much saved myself entire days worth of work with this little method, a mere 8 lines of code just saved my schedule.
* A method that writes an ArrayList of Notebooks to a file.
* A method that will add a new notebook by getting the ArrayList of Notebooks from file, iterating through every Notebook's name and adding the notebook if no existing notebooks have the same name.
* A method that will delete a Notebook from the list by getting the ArrayList of Notebooks from file, iterating through every Notebook until it finds the notebook that has the same name that the user intends to delete.

Not only that, but I refactored and replaced huge amounts of code. Some examples here:
* Completely refactored the InitNotebooks class, it now uses JSON methods and my methods instead of relying on SQLite.
* Deleted NotebookSelectionCard activity. Turns out it was completely redundant. Now the NotebookSelection RecyclerView is populated by pure Notebook objects. This creates an almost null change in behaviour, but removed the overhead of an extra object for every NotebookSelection card.
* Added a bunch of methods to Notebook.java, ripped from NotebookSelectionCard.java
* Made randomNotebookGen.py script return full lists of code, not just one Notebook code line at a time
* Added references.
Past this point, updates are fewer and farther in between, but each contains either major changes or fixes to great challenges
November 5-16
This was way more difficult that I expected, but I learned a lot from it. I started to work on a fragment that would allow a user to create a new notebook, with a custom color. Afterwards I realized just how difficult it was. The problem came from the complex hierarchy of the dialog. Inside the activity, a fragment in the form of a dialog contained a recyclerview that used an adapter to programmatically draw multiple imageviews each containing a circle shape without specific shapes. If that sounds complicated, it's because it is. It took me 10 days to finally get it working well. But it is totally worth it, considering how well it works and how beautiful it looks. The entire thing would make material designers proud. I also fixed the main menu notebook list and made the floating action buttons work and function better.

That fragment follows material design guidelines in order to provide an efficient, beautiful and effective way for users to intuitively create new notebooks, and add a small amount of customization to them. 

-->


=====================================
November 16-21
During these 5 days, I created and worked on a new Activity of my app, the NotebookMainActivity. This activity’s purpose is to open when a user selects a notebook, and display the Notebook’s contents. I also worked to delete huge portions of old, redundant or broken code, and replace it with newer and more optimized code. Furthermore, new Helper methods were written to help me optimize the time it takes for me to program, most notable one that helps me turn millisecond dates into words, so I can now display things like “5 hours ago” instead of “21/11/2016, 2:15PM”. Another method now helps me automatically obtain a corresponding accent color for every notebook color. This way, in NotebookMainActivity, the FAB will always have a contrasting color to the notebook’s toolbar and main color.
November 21-December 9

I added more to NotebookMainActivity, most notably a viewPager, a screen that prompts the user to create a new page if there aren’t any and I finished the basic layout of how each page is going to be represented in NotebookMainActivity, shown above. There were more changes, but again, they are too small to mention.





December 10-24
This change had major implications under-the-hood. The most notable change (to me, at least) was the creation of a Unique Identifier system. This is a system which assigns every object I make a unique, random sequence of numbers and letters. The system works this way: When an object like a Notebook or a Page is created, it is assigned a few variables, like the name, color, text, date, etc. These variables are mostly all provided by the user. However there is another variable saved in it, one that the user never even finds out exists. It’s a sequence of 17 characters. The first character is a type identifier. Notebooks will have the first character be “n”, pages will have “p”, etc. Then the next 16 characters are a sequence of random 64-bit characters, as in for each character of those 16, there are 64 different possibilities like lowercase & uppercase letters, numbers and two special characters. For example, the UID for a page could be:” pFx0_cOymVzSHRfDb”. This UID will be unique and will never repeat itself under normal circumstances. The chance of being repeated is 1 in 79,228,162,514,264,337,593,543,950,336.

So what does this help me in? It allows me to use these UIDs to identify specific objects when I’m searching for something. If I want to display a specific notebook, update a specific page or make sure two pages aren’t actually the exact same page copied by a bug, I can check their UIDs. Instead of having to get the entire list of notebooks, search for the notebook with the correct name and then search for the page with the correct page I want, I can just use their UIDs. 10 complex lines of code shortened to just a simple one.




Aside from that I made a Dialog that will let the user create a new page, with a specific title and a page number. Then in NotebookMainActivity pages are now sorted in a list according to the page number. Aside from that, I created a new activity called PageActivityMain. While not functional yet, most of the code that will power it is already written.





December 25-January 8
This was a tough one. 
First of all I decided to tackle a small bug real quickly before I moved onto other things. When you selected a page as favorite and then went back to the notebook activity, the list wouldn’t update, so it wouldn’t display the page as favorite until the app restarted. This should be a fairly simple fix. It wasn’t. It took me easily over a week to solve, definitely a top three most complicated bug fixes I’ve done on the app. Of course the actual fix was simple, but finding it took me way over 15 hours of research.
I finally started working on the Page Activity. The things I did in this timeframe were working in the backend adapter of the Page activity, a task that took quite a long time and research, not to mention the actual code for it is very complicated and hard to understand. However, I managed to get text boxes to display, which meant my app now had functionality, it worked for something. Undeniable a huge milestone, and it only took me 5 months of work with easily over 100 hours of research and work.


January 8-January 22
The app is almost complete, about 95%, and at this stage, it has achieved all of its main goals. The app now has support for images, and with that the app is now a powerful tool for any student. After this update, the next updates are going to be very minor, as now the app is not missing any major features so instead the updates will probably be further polishing of the design and workflow. The focus has already shifted to design, the first part being a change to the base color of the app. It’s no longer a light blue but instead a dark purple, which gives the app a less generic look.

The app allows now users to add pictures to each picture, give them titles, delete them and also they can select a picture to zoom in for further detail. At this stage, the app is technically at a releasable state.


January 22-28
Well I officially consider the app to be complete, as I have finished the last few bits of polish I’ll add to the app at this stage. No changes are significant though, only bug fixes and performance improvements. I myself have started to use the app regularly and have found no unsolved problems yet. I did it, I made an Android App from scratch!
References:
Android: Convert date to milliseconds. (2012). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/9671085/android-convert-date-to-milliseconds
Best way to work with dates in Android SQLite. (2016). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/7363112/best-way-to-work-with-dates-in-android-sqlite
Bottom Sheets. (2017). Material Design. Retrieved 24 January 2017, from http://www.materialdoc.com/bottom-sheets/
chiuki/android-recyclerview. (2017). GitHub. Retrieved 24 January 2017, from https://github.com/chiuki/android-recyclerview/blob/master/app/src/main/java/com/sqisland/android/
recyclerview/GridLayoutVariableSpanSizeActivity.java
code-troopers/android-betterpickers. (2017). GitHub. Retrieved 24 January 2017, from https://github.com/code-troopers/android-betterpickers
CodePath (n.d.) CodePath Android Cliffnotes. Retrieved September 28, 2016, from http://guides.codepath.com/android
Creating a button in Android Toolbar. (2012). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/31231609/creating-a-button-in-android-toolbar
google/gson. (2017). GitHub. Retrieved 24 January 2017, from https://github.com/google/gson
Google (n.d.). Introduction - Material design  Retrieved September 28, 2016, from http://material.google.com/ 
Google (n.d.) Android Developers. Retrieved September 28, 2016, from https://developer.google.com 
Granada, D. (2015). coldblade2000/Clickr. GitHub. Retrieved 24 January 2017, from https://github.com/coldblade2000/Clickr/blob/master/app/src/main/java/com/twotowerstudios/clickr/SharedPrefs.java
Gupt, M. (2015). Android Action Bar In A Dialog Using ToolBar - Truiton. Truiton. Retrieved 24 
January 2017, from http://www.truiton.com/2015/04/android-action-bar-dialog-using-toolbar/
How do I delete files programmatically on Android?. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/24659704/how-do-i-delete-files-programmatically-on-android
How to add a check box to an alert dialog. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/9763643/how-to-add-a-check-box-to-an-alert-dialog
How to change colors of parent Fragment and views of RecyclerView depending on OnClickListener position from recyclerview. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/40601129/how-to-change-colors-of-parent-fragment-and-views-of-recyclerview-depending-on-o
How to count number of records in sqlite in Android. (2012). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/12436596/how-to-count-number-of-records-in-sqlite-in-android
How to randomly receive a Material Design Color?. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/32655342/how-to-randomly-receive-a-material-design-color
How to sort an arraylist of objects by a property?. (2017). Stackoverflow.com. Retrieved 24 January 2017, from http://stackoverflow.com/questions/2535124/how-to-sort-an-arraylist-of-objects-by-a-property
Judd, S. (2017). bumptech/glide. GitHub. Retrieved 24 January 2017, from https://github.com/bumptech/glide
Liu, C. (2015). Storing App-Related Data in Your Android Apps - Developer.com. Developer.com. Retrieved 24 January 2017, from 
http://www.developer.com/ws/android/storing-app-related-data-in-your-android-apps.html
Lowe, D. (2011). Java all-in-one for dummies. Hoboken, N.J.: Wiley.
Mastering the Coordinator Layout · Saúl Molinero. (2017). Saulmm.github.io. Retrieved 24 January 2017, from http://saulmm.github.io/mastering-coordinator
Mikepenz,. (2017). mikepenz/MaterialDrawer. GitHub. Retrieved 24 January 2017, from https://github.com/mikepenz/MaterialDrawer
Peitek, N. (2016). Gson — Getting Started with Java-JSON Serialization & Deserialization. Futurestud.io. Retrieved 24 January 2017, from https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization
Stack Overflow (n.d) Stack Overflow. Retrieved September 28, 2016, from http://stackoverflow.com 
Tamada, R. Android working with Card View and Recycler View. androidhive. Retrieved 24 January 2017, from http://www.androidhive.info/2016/05/android-working-with-card-view-and-recycler-view/
the-blue-alliance/spectrum. (2017). GitHub. Retrieved 24 January 2017, from https://github.com/the-blue-alliance/spectrum/blob/master/spectrum/src/main/java/com/thebluealliance/spectrum/internal/ColorUtil.java
Using DialogFragment | CodePath Android Cliffnotes. Guides.codepath.com. Retrieved 24 January 2017, from https://guides.codepath.com/android/Using-DialogFragment
Using the App Toolbar | CodePath Android Cliffnotes. Guides.codepath.com. Retrieved 24 January 2017, from https://guides.codepath.com/android/Using-the-App-ToolBar

$$ Goals

Main Goals
Create a “Virtual notebook” app for android
Allow the taking, saving and organizing of photos
Let the user create different “virtual notebooks” for each of their real-life notebooks.
Catalogue the photos of each notebook by pages
Allow you to add multiple photos of each notebook page.
 Have my app follow Material Design standards
Give my app a minimalistic, intuitive and responsive design
Come up with a catchy name
Release my app on the Play Store Market

Possible Goals
Allow the user to upload their notebooks to the cloud
Sharing, exporting and importing notebooks
Market my app
Make the app more appealing to normal people not involved with the Anglo
Find ways to monetize the app without hurting productivity
Give the app an overall professional look.


Stretch Goals
Create a web interface to allow the accessing of virtual notebooks
Find a way to either host or make a server for the web interface
Make the web interface compatible with iOS and most desktop browsers and operating systems.

$$Action Plan

Preliminary steps
What are the main steps I’ll take to bring my product to fruition?

Step 1: Identify realistic and stretch goals.
For this step, I will use my previous knowledge and experience to come up with a bunch of goals for my app (as in, what do I want the app to have), then rank them according to priority and feasibility. As an example, creating a virtual notebook to organize, store and upload photos of your notebook is essential, so it will be top priority. On the other hand, stretch goals, like quick information reference for various subjects (formulas for math, etc) and make a homework reminder are goals which I’d really like to reach, but may or may not be feasably achievable in the time frame I have.

Step 2: Start refreshing my memory on Android Material Design guidelines.
Material Design is the name of the guidelines and style by which all Android apps should be designed. They are a set of rules, examples and variables that help create a more unified, simplistic and minimalistic style for Android apps. The main idea behind Material Design looks is that most visible elements should behave as if they were made out of paper and cardboard, thus the “Material” part of the name. This is easily seen in images such as the one on the right. The navigation drawer behaves as a piece of cardboard, on top of the main content. The header in the navigation drawer also has a style similar to colored cardboard pieces. I want my app to follow Material Design standards as strictly as possible in order to create a professional looking app. I’ve done this before on a humanities project.
Step 3: Start preliminary design of the various pages in my app.
One of the best ways to have consistent design and to analyze the feasibility of your ideas is to draw them out first on paper. This will help you work out the proportions, efficiency for the user and the main color theory and contrasts. Not only that, but if I don’t have a design before I start programming, making a change to the layout could force me to spend hours refactoring (changing and rewriting) my code. In order to have a clear picture in my head about what I want to make, and for me to not waste time fixing future mistakes, plus improve the quality and fidelity of my final product, it is important that I sketch out the designs beforehand. I may also use third-party design prototyping programs to help me have a clear view of my layout.

Step 4: Identify and list the things I’ll have to do and learn for each page
I must list out everything that each page will have in order to have a more complete vision of how things will interact and interconnect. I will do this by using my experience to realistically identify what each page will probably have and what it will need to work. For example, a page that gives you events will probably need a network connection, a server, Recycler Layouts, etc. It is better to identify all the elements of a page beforehand so I can quickly research if any two elements will clash or won’t work well together. I’ve had times before where I spend hours making something only to realize that a major part of it is incompatible with another part of it.

Step 5: Start the actual project - Prototyping
I’ll start using Android Studio 2.2 to start creating the actual application. At first I will start making simple pages with basic designs but near-fully functional features. I must follow about half of my Main goals by the end of this. I intend to have almost all critical features and abilities done, no matter how badly done

Step 6: Code cleanup and standardization
Before I start my designs, I will use the experience and knowledge of my code by then to start cleaning up the code and fixing most bugs. I want to make it so that making changes to the backbone of my application will be an easy and painless process. A clean codebase will always help keep bugs down in the future.

Step 7: Aesthetics and design
Once my code is clean and mostly bug-free, it’ll be time to start giving the app a working design, which loosely follows Material Design guidelines, as described in my goals. I will start actually programming the layout itself and starting to make the interface responsive and cleaner-looking. I intend to complete the final look of the app by the end of this.

Step 8: Start working on possible and stretch goals (If there is time left)
Once the app’s main goals are complete, I will try to accomplish some of the possible and stretch goals I have laid out for my app. These goals will focus on making a more complete and accessible app, but every critical function of my app will have already been done by then. These goals include: Saving to cloud, having a web-interface and adding extra features to my app.

Step 9 & 11: Start the product campaign
I have seen firsthand the true effects and importance of advertising, and understand why advertising budgets for movies and games are often bigger than the actual production budget. If an app is good, but there is no way that someone could find out about it, then the app won’t  have any users. Because of this, I intend to make the app as approachable and marketable as possible. I will do this by: designing catchy logos, names and graphics for the Play Store. Not only that, but I will try to use social media to help me market without having to spend so much money. Posters on the school could help me reach a good portion of the School’s Android population. Advertising on sites like Reddit.com, which encourage user-created content will help me reach a friendly and worldwide audience.

Step 10: Release
Release the product. I will start hearing feedback from users as fast as possible, pushing out updates to improve the experience within my app and to make it as stable as possible. During the release, I will also carefully monitor the demographics and the usage analytics of my users to try and reach a broader audience.

$$Personal Project Plan
Personal project plan
Project title: 
Virtual Notebook (title WIP)
Student: 
Diego Granada
Date/Duration of Project:
.
Goal: Formulate a statement that clearly shows your goal, based on personal interests.
My goal for the personal project is to design, develop, market and release an Android app, specifically an app that will focus on making the lives of Anglo students (and worldwide students as a whole) easier, simpler, more efficient and/or more interconnected by providing them a way to save and organize their notebooks in their phones or maybe even the cloud.
What is the purpose of the goal? What do you hope to achieve?
My purpose is to release the app, which would surely help many students around the school and world manage to lower their workloads, bag weights and lower the chances of them not delivering work. I intend to achieve a higher degree of interconnectivity between students who may now share notes between them in a more versatile, diverse and intuitive way. I see a future in which students’ final grades are higher and achieve more, with at least some of the credit lying on my app.
Global context: Identify the global context.
Scientific and technological innovation
Identify which part of the global context you will focus on:
Modernization, industrialization and engineering.
Explain why you have chosen it, justifying the relevance of your inquiry.
I have chosen this global context because with my app, I intend to modernize and streamline the sharing of notes and knowledge between students. I personally hold the sharing of information very dearly and find it to be a very important part of student life. I am now modernizing this sharing of knowledge.



